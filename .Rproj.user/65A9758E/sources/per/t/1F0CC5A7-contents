---
title: "Tecator Infratec Analyzer"
subtitle: '...a Vignette on Functional Data Analysis'
author: "[Felipe Toledo Ferreira](https://github.com/FelipeToledoFerreira)"
date: today
description: "I present some topics in Functional Data Analysis utilizing the Tecator Infratec Analyzer dataset."
bibliography: vignette0001.bib
bibliographystyle: apa
nocite: |
  @ferraty:2006, @scheipl:2023, @bande:2012, @wood:2011, @wood:2016, @wood:2004, @wood:2017, @wood:2003, @mcLean:2014, @goldsmith:2024
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
library("klippy")
knitr::opts_chunk$set(class.source = "funky")
```

# Introduction

## Data

The Tecator Infratec Feed Analyzer data set (seen in @ferraty:2006), is composed of data recorded on a Tecator Infratec Food and Feed Analyzer tool, working in the wavelength range 850 - 1050<i>nm</i> by the Near Infrared Transmission (NIT) principle. Each sample ($N = 215$) contains finely chopped pure meat with different moisture, fat and protein contents. For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is $-\log_{10}$ of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry (click [here](https://lib.stat.cmu.edu/datasets/tecator) for further details).

## Setup

This vignette is primarily concerned with presenting a set of methods to perform functional regression, motivated by the Tecator Infratec Feed Analyzer dataset, and with computational tools provided by the <tt>R</tt> programming language. First, a number of packages must be downloaded and subsequently called. In particular, the '[<tt>tidyfun</tt>](https://tidyfun.github.io/tidyfun/)' package must be downloaded remotely, as it is not yet available on <tt>CRAN</tt>. The following chunk performs this step:

```{r packages, message = FALSE, warning=FALSE}
library("fda.usc")    ## R package containing the 'tecator' dataset
library("tidyverse")  ## R package for tidy data manipulation and visualization
library("tf")         ## R package for tidy functional data manipulation
library("tidyfun")    ## R package for tidy functional data visualization
library("extrafont")
library("gridExtra")  ## R package for additional visualization tools
library("moments")    ## R package for computing sample moments
library("corrplot")   ## R package for visualizing correlograms
library("reshape2")   ## R package for data manipulation
library("refund")     ## R package for functional regression
library("forcats")    ## R package for data manipulation, particularly factors
library("gratia")     ## R package for visualizing additive models
library("gamlss")     ## R package for generalized additive models for location, scale and shape
```

The '<tt>tecator</tt>' dataset is sourced from the <tt>fda.usc</tt> package (see @bande:2012). Noticeably, it is stored therein as a <tt>list</tt> object - this vignette converts this dataset to a <tt>data.frame</tt> object, via the tools made available on the <tt>tf</tt> package, which seeks to provide classes and methods for "Tidy Functional Data", inspired by the greater existing <tt>tidyverse</tt> packages for data manipulation and visualization. The following chunk performs this conversion:

```{r data, message = FALSE}
## Importing the 'tecator' dataset
data(tecator)
## Converting 'tecator' to df (data frame)
tecator_data = data.frame(fat = tecator$y$Fat,
                          water = tecator$y$Water,
                          protein = tecator$y$Protein)
## Adding the functional data, in tfd structure, to the df object
tecator_data = tecator_data |>
  mutate(absorbance = tfd(data = tecator$absorp.fdata$data,
                          arg = tecator$absorp.fdata$argvals))
## Separating data by fat percentage
tecator_data = tecator_data |>
  mutate(fat20 = factor(ifelse(test = (fat >= 20),
                               yes = "20% > Fat",
                               no = "20% < Fat"),
                        levels = c("20% > Fat",
                                   "20% < Fat")))
```

@tbl-table0001 illustrates how functional data is stored within a <tt>data.frame</tt> object through the implementation of the <tt>tf</tt> package - in particular, the <tt>absorbance</tt> column is stored as a <tt>tfd</tt> object, such that, to every row within the resulting data frame, there exists a corresponding functional observation.

```{r tbl-table0001, echo = FALSE, results='asis'}
#| tbl-cap: "Snapshot of the five first rows of the '<tt>tecator</tt>' dataset. Note that the column labelled as '<tt>absorbance</tt>' is composed of '<tt>tfd</tt>' objects, from the '<tt>tidyfun</tt>' <tt>R</tt> package."
knitr::kable(head(tecator_data, 5), align = 'rrrcl')
```

------------------------------------------------------------------------

# Exploratory Data Analysis

## Fat percentage

Expressly, the main goal of this application is to construct a predictive model for the fat percentage of the meat samples, utilizing corresponding absorbance curves as model covariates. For that purpose, first a simple exploratory analysis of the data must be performed, to allow for model elicitation. @fig-figures0001 and @tbl-table0002 seen below provide a brief view of the distribution of the fat percentage. Hereafter, the observed values of fat percentage in the dataset may also be referred to as $y_1,\ldots,y_{215}$, which is assumed to be sampled from a set of independent random variables $Y_1,\ldots,Y_{215}$ with unknown distribution.

```{r fig-figures0001, fig.align='center', fig.width=8, fig.height=4}
#| fig-cap: "Left panel: sample estimated density of the fat percentage. Right panel: sample boxplot of the fat percentage."
g01 = tecator$y |> ggplot(mapping = aes(x = Fat)) +
  geom_density(fill = "cyan",
               alpha = .25,
               linetype = "dashed") +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125)) +
  labs(x = "Fat %",
       y = "Density") +
  scale_y_continuous(expand = c(0, 0),
                     breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.05),
                     labels = c("0", substitute("1/100"), substitute("2/50"),
                                substitute("3/100"), substitute("1/25"),
                                substitute("1/20")),
                     limits = c(0, 0.05)) +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(5, 15, 25, 35, 45),
                     labels = c("5", "15", "25", "35", "45"),
                     limits = c(0.9, 49.1))

g02 = tecator$y |> ggplot(mapping = aes(x = Fat)) +
  geom_boxplot(fill = "magenta",
               alpha = .5) +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        axis.text.y = element_blank(),
        axis.title.y = element_blank(),
        axis.minor.ticks.y.left = element_blank()) +
  labs(x = "Fat %",
       y = "Density")

grid.arrange(g01,
             g02,
             widths = c(1, 1),
             ncol = 2)
```

```{r tbl-table0002, echo = FALSE, results='asis'}
#| tbl-cap: "Sample summary statistics of the fat percentage."
rbind(NULL, round(as.numeric(summary(tecator$y$Fat)), 3)) |> data.frame() |> `colnames<-`(attr(summary(tecator$y$Fat), "names")) |>
  knitr::kable()
```

Additionally, the sample skewness and kurtosis were computed as $\widehat{\text{Skew}}(Y) \approx `{r} round(moments::skewness(tecator$y$Fat), 3)`$ and $\widehat{\text{Kurt}}(Y) \approx `{r} round(moments::kurtosis(tecator$y$Fat), 3)`$. As the data refers to a percentage value, its support is bounded on the interval $[0,100]$, which may be normalized to the unit interval $[0,1]$ for computatibility purposes. As none of the observed values are at the boundaries $0$ or $1$ (and it is reasonable to assume that no observation will attain this value), the fat percentage may likewise be assumed to belong to the strictly closed $(0,100)$ interval. Generalized linear models may consequently be more appropriate to model this form of data, in particular for families with bounded support (e.g.: Beta regression).

## Absorbance curves

The absorbance curve data, unlike the fat percentage data seen in the previous subsections, is composed of values obtainted discreetly by subjecting each of the meat samples to a spectrometric measuring device varying in the 850 - 1050<i>nm</i> wavelength range uniformly, with $100$ equal design points across all meat samples. This results in $100 \cdot 215 = 21500$ observations in total. @fig-figures0002 and @fig-figures0003 provide a brief analysis on the distribution of the data; the plotted data is composed of the raw (i.e.: not smoothed) data. As [previous reports](http://eio.usc.es/eipc1/BASE/BASEMASTER/FORMULARIOS-PHP-DPTO/REPORTS/report11_02.pdf) have indicated the presence of an additional peak on the absorbance curves around the 930<i>nm</i> wavelength for meat samples with fat percentage superceding 20, the data are separated amongst these two groups.

```{r fig-figures0002, fig.align='center', fig.width=8, fig.height=4}
#| fig-cap: "Left panel: spaghetti plot of the absorbance curves, separated by fat percentage. Right panel: mean absorbance curves, separated by fat percentage."
g03 = tecator_data |>
  ggplot(mapping = aes(y = absorbance,
                       color = fat20)) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = "Absorbance",
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange")) +
  geom_vline(xintercept = 930,
             linetype = "dashed",
             col = "black",
             alpha = .5)
g04 = tecator_data |> 
  group_by(fat20) |> summarise(mean_absorbance = mean(absorbance)) |>
  mutate(fat20 = factor(fat20,
                        levels = c("20% > Fat",
                                   "20% < Fat",
                                   "Overall"))) |>
  add_row(fat20 = "Overall",
          mean_absorbance = mean(tecator_data$absorbance)) |>
  ggplot(mapping = aes(y = mean_absorbance,
                       color = factor(fat20,
                                      levels = c("20% > Fat",
                                                 "20% < Fat",
                                                 "Overall")))) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = "Absorbance",
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange", "red")) +
  geom_vline(xintercept = 930,
             linetype = "dashed",
             col = "black",
             alpha = .5)
grid.arrange(g03,
             g04,
             ncol = 2)
```

```{r fig-figures0003, fig.align='center', fig.width=8, fig.height=4, warning=FALSE}
#| fig-cap: "Left panel: absorbance variance curves, separated by fat percentage. Right panel: correlogram of the absorbance curves."
g05 = tecator_data |> 
  group_by(fat20) |> summarise(var_absorbance = var(absorbance)) |>
  mutate(fat20 = factor(fat20,
                        levels = c("20% < Fat",
                                   "20% > Fat",
                                   "Overall"))) |>
  add_row(fat20 = "Overall",
          var_absorbance = var(tecator_data$absorbance)) |>
  ggplot(mapping = aes(y = var_absorbance,
                       color = factor(fat20,
                                      levels = c("20% > Fat",
                                                 "20% < Fat",
                                                 "Overall")))) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = substitute("Absorbance"^2),
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange", "red")) +
  geom_vline(xintercept = 930,
             linetype = "dashed",
             col = "black",
             alpha = .5)
g06 = melt(data = cor(tecator$absorp.fdata$data)) |>
  mutate(x = 850 + 200 * (Var1 - 1) / 99,
         y = 850 + 200 * (Var2 - 1) / 99,
         z = value,
         Var1 = NULL,
         Var2 = NULL,
         value = NULL) |>
  ggplot(mapping = aes(x = x,
                       y = y,
                       fill = z)) +
  geom_raster() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 size = .25),
        axis.ticks = element_line(color = "black",
                                  size = .125),
        legend.position = "top",
        plot.margin = unit(c(.25, .75, .25, .75), "cm")) +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       fill = "Correlation") +
  scale_y_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 950, 1000, 1050),
                     labels = c("850", "900", "950", "1000", "1050"),
                     limits = c(850, 1050)) +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 950, 1000, 1050),
                     labels = c("850", "900", "950", "1000", "1050"),
                     limits = c(850, 1050)) +
  scale_fill_continuous(type = "viridis")
grid.arrange(g05,
             g06,
             ncol = 2)
```

From a modelling standpoint, the values obtained at each design point may be considered covariates $x_{i,1},\ldots,x_{i,100}$, for $i \in \{1,\ldots,215\}$, and as $100 = p < N = 215$, even a simple linear regression model is feasible. However, as evidenced in the Right panel of @fig-figures0003, the data is highly correlated. Note that the minimum absolute correlation observed across the absorbance curves was $\min_{i,j}\{\vert \rho_{i,j} \vert\} \approx `{r} round(min(abs(cor(tecator$absorp.fdata$data))), 3)`$. This implies that, were the data applied indiscriminately in a simpler linear regression model, it would be subject to a significant amount of multicollinearity. Alternatively, each absorbance curve may be considered a functional covariate $\chi_{1},\ldots,\chi_{215}$, which may be estimated by smoothing the discrete observed values, allowing for a more flexible form of high-dimensional modelling through <i>functional regression</i>. Adopting the purview of functional data analysis in this context also presents other advantages: functionals (i.e.: derivatives, integrals, etc.) of the data in question may likewise be explored. It is important to remark that the values of these functionals is dependent on the support of the data in question. The method '<tt>tf_derive()</tt>', part of the '<tt>tf</tt>' '<tt>R</tt>' package, allows for the computation of the first-order derivative of the absorbance curves. @tbl-table0003 provides a view of the inclusion of the derivative column.

```{r tbl-table0003, echo = FALSE, results='asis'}
#| tbl-cap: "Comparisons of the '<tt>absorbance</tt>' and '<tt>dabsorbance</tt>' columns of the five first rows of the '<tt>tecator</tt>' dataset. The column labelled as '<tt>dabsorbance</tt>' is composed of '<tt>tfd</tt>' objects, and represents the first order derivative of the '<tt>absorbance</tt>' column, as computed via finite differences."
tecator_data = tecator_data |> mutate(dabsorbance = tf_derive(absorbance,
                                                              order = 1))
knitr::kable(head(tecator_data[c('fat', 'absorbance', 'dabsorbance')], 5), align = 'cc')
```

As similarly seen in previous reports, the derivative of the absorbance curves is significantly different for meat samples with fat percentage greater than 20%, as illustrated by @fig-figures0004 and @fig-figures0005. Unlike the usual absorbance curves, in this context the minimum absolute correlation observed across the derivatives of the absorbance curves is $\min_{i,j}\{\vert \tilde{\rho}_{i,j} \vert\} \approx `{r} round(min(tecator_data$dabsorbance |> as.matrix() |> cor() |> abs()), 3)`$. The $D$ symbol is adopted to denote the application of the derivative. Note, in the Right panel of @fig-figures0005, that the correlogram presents a steep decrease in correlation between the 930<i>nm</i> and 950<i>nm</i> wavelengths. This corresponds to a steep valley in the mean function for the data with fat percentage greater than 20, as seen in the Right panel of @fig-figures0004.

```{r fig-figures0004, fig.align='center', fig.width=8, fig.height=4}
#| fig-cap: "Left panel: spaghetti plot of the derivative of the absorbance curves, separated by fat percentage. Right panel: mean derivative of the absorbance curves, separated by fat percentage."
g07 = tecator_data |>
  ggplot(mapping = aes(y = dabsorbance,
                       color = fat20)) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = substitute(paste(italic("D"), "Absorbance")),
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange"))
g08 = tecator_data |> 
  group_by(fat20) |> summarise(mean_dabsorbance = mean(dabsorbance)) |>
  mutate(fat20 = factor(fat20,
                        levels = c("20% < Fat",
                                   "20% > Fat",
                                   "Overall"))) |>
  add_row(fat20 = "Overall",
          mean_dabsorbance = mean(tecator_data$dabsorbance)) |>
  ggplot(mapping = aes(y = mean_dabsorbance,
                       color = factor(fat20,
                                      levels = c("20% > Fat",
                                                 "20% < Fat",
                                                 "Overall")))) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = substitute(paste(italic("D"), "Absorbance")),
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange", "red"))
grid.arrange(g07,
             g08,
             ncol = 2)
```

```{r fig-figures0005, fig.align='center', fig.width=8, fig.height=4, warning=FALSE}
#| fig-cap: "Left panel: variance of the derivative of the absorbance curves, separated by fat percentage. Right panel: correlogram of the derivative of the absorbance curves."
g09 = tecator_data |> 
  group_by(fat20) |> summarise(var_dabsorbance = var(dabsorbance)) |>
  mutate(fat20 = factor(fat20,
                        levels = c("20% < Fat",
                                   "20% > Fat",
                                   "Overall"))) |>
  add_row(fat20 = "Overall",
          var_dabsorbance = var(tecator_data$dabsorbance)) |>
  ggplot(mapping = aes(y = var_dabsorbance,
                       color = factor(fat20,
                                      levels = c("20% > Fat",
                                                 "20% < Fat",
                                                 "Overall")))) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = substitute(paste("(", italic("D"), "Absorbance)"^2)),
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange", "red"))
g10 = tecator_data$dabsorbance |>
  as.matrix() |>
  cor() |>
  melt() |>
  mutate(x = Var1,
         y = Var2,
         z = value,
         Var1 = NULL,
         Var2 = NULL,
         value = NULL) |>
  ggplot(mapping = aes(x = x,
                       y = y,
                       fill = z)) +
  geom_raster() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 size = .25),
        axis.ticks = element_line(color = "black",
                                  size = .125),
        legend.position = "top",
        plot.margin = unit(c(.25, .75, .25, .75), "cm")) +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       fill = "Correlation") +
  scale_y_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(850, 1050)) +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(850, 1050)) +
  scale_fill_continuous(type = "viridis")
grid.arrange(g09,
             g10,
             ncol = 2)
```

An usual problem when dealing with multivariate data is that, in the absence of greater context, there is no singular approach to determining a ranking of observations. This is also true of functional data, hence there is no specific way to determine functional quantiles, nor a universal definition of a functional outlier. @pintado:2009 defines a form of functional depth, which allows for the computation of the functional median (as well as other quantiles), a work which was latter expanded in @sun:2011, wherein the procedure to construct a functional boxplot was delineated, allowing also for outlier detection. The computational implementation of functional boxplots is available in the '<tt>fda</tt>' package for the <tt>R</tt> programming language, as part of the method <tt>fbplot()</tt>. Moreover, the computation of the functional depth developed in @pintado:2009 is available in the <tt>tf</tt> package through the <tt>tf_depth()</tt> method. @fig-figures0006 displays functional boxplots of the absorbance curves, as well as their corresponding derivatives. Interesting insights may be gleaned with respect to manner in which functional depth detects outliers: in the first boxplot the observations $43$, $44$, $99$, $140$ and $185$ are classified as outliers, whilst for the second boxplot, only the observation $140$ is classified as an outlier. This is a sensible result, as it may be observed that the outlier observations in the former plot present significant vertical shift with respect to the median curves, and the first order derivative of a function is invariant with respect to any constant term (i.e., any constant vertical shift), hence the application of the derivative '<it>standardizes</it>' the absorbance curves. @fig-figures0007 enhances previous plots seen in @fig-figures0002 and @fig-figures0004 by highlighting outlier curves. As previously stated, the outlier curves for the absorbance curves possess significant vertical shift 'upwards', i.e., they are consistently greater than the mass of functional data, but also present a similar overall 'shape'. By contrast, the sole outlier for the derivative of the absorbance curves presents more complex behaviour, initially being greater than the mass of functional data, and crossing over so that it is lesser. We note, from @fig-figures0008, that the functional mean and median are very similar in the case of the derivative of the absorbance curves, whilst for the absorbance curves themselves there is indication of positive skewness, particularly for curves whose corresponding meat sample has more than 20% of fat.

```{r fig-figures0006, fig.align='center', fig.width=8, fig.height=8, warning=FALSE}
#| fig-cap: "Upper panel: functional boxplots of the absorbance curves. Lower panel: functional boxplots of the derivative of the absorbance curves."
par(mfrow = c(2, 1))
tecator_data$absorbance |> as.matrix(byrow = FALSE) |> t() |>
  fbplot(xlab = substitute(paste("Wavelength (in ",italic("nm"),")")),
         ylab = substitute("Absorbance"),
         family = "LM Roman 10",
         axes = F,
         ylim = c(1.5, 5.5),
         color = "darkgrey",
         barcol = "lightgray",
         outliercol = "red",
         x = tf_arg(tecator_data$absorbance),
         xlim = c(850, 1050),
         method = "MBD") |> invisible()
axis(side = 2, at = c(-100, 1, 2, 3, 4, 5, 6, 7, 100),
     labels = c("a", "1", "2", "3", "4", "5", "6", "7", "b"),
     family = "LM Roman 10",
     col.axis = "cornsilk4",
     las = 2,
     cex.axis = .75)
axis(side = 1, at = c(-10, 850, 900, 950, 1000, 1050, 2000),
     labels = c("a", "850", "900", "950", "1000", "1050", "b"),
     family = "LM Roman 10",
     col.axis = "cornsilk4",
     las = 1,
     cex.axis = .75)
tecator_data$dabsorbance |> as.matrix(byrow = FALSE) |> t() |>
  fbplot(xlab = substitute(paste("Wavelength (in ",italic("nm"),")")),
         ylab = substitute(paste(italic("D"),"Absorbance")),
         family = "LM Roman 10",
         axes = F,
         ylim = c(-0.02, 0.05),
         color = "darkgrey",
         barcol = "lightgray",
         outliercol = "red",
         x = tf_arg(tecator_data$dabsorbance),
         xlim = c(850, 1050),
         method = "MBD") |> invisible()
axis(side = 2, at = c(-100, -0.02, 0, 0.02, 0.04, 100),
     labels = c("a", "-0.02", "0", "0.02", "0.04", "b"),
     family = "LM Roman 10",
     col.axis = "cornsilk4",
     las = 2,
     cex.axis = .75)
axis(side = 1, at = c(-10, 850, 900, 950, 1000, 1050, 2000),
     labels = c("a", "850", "900", "950", "1000", "1050", "b"),
     family = "LM Roman 10",
     col.axis = "cornsilk4",
     las = 1,
     cex.axis = .75)
```

```{r fig-figures0007, fig.align='center', fig.width=8, fig.height=4, warning=FALSE}
#| fig-cap: "Upper panel: spaghetti plot of the absorbance curves, separated by fat percentage, with outlier curves highlighted in black; observation $140$ is likewise dashed. Lower panel: spaghetti plot of the derivative of the absorbance curves, separated by fat percentage, with outlier curves highlighted in black."
g11 = g03
g11$data = g11$data[ - c(43, 44, 140, 99, 185) , ]
g11 = g11 + tecator_data[ c(43, 44, 99, 185) , ] |> 
  geom_spaghetti(mapping = aes(y = absorbance),
                 col = "black") + tecator_data[ 140 , ] |> 
  geom_spaghetti(mapping = aes(y = absorbance),
                 col = "black",
                 linetype = "dashed")
g12 = g07
g12$data = g07$data[ -140 , ]
g12 = g12 + tecator_data[ 140, ] |> 
  geom_spaghetti(mapping = aes(y = dabsorbance),
                 col = "black")
grid.arrange(g11,
             g12,
             ncol = 2)
```

```{r fig-figures0008, fig.align='center', fig.width=8, fig.height=4, warning=FALSE}
#| fig-cap: "Upper panel: mean and median absorbance curves, separated by fat percentage, represented respectively by solid and dashed curves. Lower panel: mean and median derivative of the absorbance curves, separated by fat percentage, represented respectively by solid and dashed curves."
g04 = g04 + tecator_data |> 
  group_by(fat20) |> summarise(median_absorbance = median(absorbance)) |>
  mutate(fat20 = factor(fat20,
                        levels = c("20% < Fat",
                                   "20% > Fat",
                                   "Overall"))) |>
  add_row(fat20 = "Overall",
          median_absorbance = median(tecator_data$absorbance)) |>
  geom_spaghetti(inherit.aes = F,
                 mapping = aes(y = median_absorbance,
                               col = fat20),
                 linetype = "dashed")
g08 = g08 + tecator_data |> 
  group_by(fat20) |> summarise(median_dabsorbance = median(dabsorbance)) |>
  mutate(fat20 = factor(fat20,
                        levels = c("20% < Fat",
                                   "20% > Fat",
                                   "Overall"))) |>
  add_row(fat20 = "Overall",
          median_dabsorbance = median(tecator_data$dabsorbance)) |>
  geom_spaghetti(inherit.aes = F,
                 mapping = aes(y = median_dabsorbance,
                               col = fat20),
                 linetype = "dashed")
grid.arrange(g04,
             g08,
             ncol = 2)
```

Note that @fig-figures0002, @fig-figures0003 and @fig-figures0004 display the <it>raw</it> absorbance curves (and corresponding derivatives), that is, we employ no smoothing techniques in those displays. This is feasible for this particular data set due to the fact that the absorbance curves (and corresponding derivatives) are contaminated by very little noise. The method <tt>tfb()</tt>, of the '<tt>tidyfun</tt>' allows us to represent variables originally stored as <tt>tfd</tt> objects, ideal for raw functional data, to variables stored as <tt>tfb</tt> functional data, which is ideal for representing functional data as a linear combination of a finite number of basis functions; this is done by an interface with methods on the '<tt>mgcv</tt>' <tt>R</tt> package. In particular, we will smooth the usual absorbance curves utilizing $K = 15$ B-spline basis, whilst the derivatives of the absorbance curves will be smoothed utilizing $K = 30$ B-spline basis. The results are presented in Figures @fig-figures0009 and @fig-figures0010. Whilst certain distinctions are visible between the raw and smoothed data, it is apparent that the smoothed data provides a reasonable approximation to the sampled curves. Moreover, we note that the <tt>tfb()</tt> method itself provides a diagnostic with respect to the amount of variability preserved in the basis representation (which is ommited in the present study, but is exhibited by setting the argument <tt>verbose = TRUE</tt>): for both generated <tt>tfb</tt> objects the basis representations preserve a minimum of $99.8\%$ variability. We may now proceed to studying the functional regression problem.

```{r fig-figures0009, fig.align='center', fig.width=8, fig.height=4, warning=FALSE}
#| fig-cap: "Left panel: raw absorbance curves. Right panel: smoothed absorbance curves."
tecator_data = tecator_data |> mutate(absorbance_basis = tfb(absorbance,
                                                             basis = "spline",
                                                             bs = "bs",
                                                             k = 15,
                                                             verbose = FALSE),
                                      dabsorbance_basis = tfb(dabsorbance,
                                                              basis = "spline",
                                                              bs = "bs",
                                                              k = 30,
                                                              verbose = FALSE))
g13 = tecator_data |>
  ggplot(mapping = aes(y = absorbance_basis,
                       color = fat20)) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = substitute("Smoothed Absorbance"),
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange")) +
  geom_vline(xintercept = 930,
             linetype = "dashed",
             col = "black",
             alpha = .5)
grid.arrange(g03,
             g13,
             ncol = 2)
```

```{r fig-figures0010, fig.align='center', fig.width=8, fig.height=4, warning=FALSE}
#| fig-cap: "Left panel: raw derivative of the absorbance curves. Right panel: smoothed derivative of the absorbance curves."
g14 = tecator_data |>
  ggplot(mapping = aes(y = dabsorbance_basis,
                       color = fat20)) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = substitute(paste("Smoothed ",italic("D"),"Absorbance")),,
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 930, 950, 1000, 1050),
                     labels = c("850", "900", "930", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange"))
grid.arrange(g07,
             g14,
             ncol = 2)
```

------------------------------------------------------------------------

# Functional Regression

For this present data set we will consider two possible models for the relationship between the mean fat percentage of sampled meats and their corresponding absorbance curves, given as follows

$$
  \mu_i = \mathbb{E}[Y_i \vert \chi_i] = g\Bigg\{\!\beta_0 + \!\!\int^{1050}_{850} \beta_1(s) D \chi_i(s) \text{d}s\!\Bigg\}
$${#eq-modelI}
$$
  \mu_i =  \mathbb{E}[Y_i \vert \chi_i] = g\Bigg\{\!\beta_0 + \!\!\int^{1050}_{850} F\{s,D \chi_i(s)\} \text{d}s\!\Bigg\}
$${#eq-modelII}

@eq-modelI corresponds to the usual form of a Generalized Functional Linear Model (GFLM), whilst @eq-modelII corresponds to a more complex model, the Functional Generalized Additive Model (FGAM)[^1], as seen in @mcLean:2014. Both of these models are implemented on the '<tt>refund</tt>' <tt>R</tt> package (see @goldsmith:2024), under the <tt>pfr()</tt> and <tt>fgam()</tt> methods, respectively. This form of functional regression problem, wherein the response variable is a scalar variable and the predictors are functions, is referred to as scalar-on-function (SoF) regression. For both models to be studied presently, we will take $Y_i \sim \text{Beta}(\mu_i,\phi)$, with mean as in @eq-modelI or @eq-modelII, and deviation $\phi > 0$. In order to better diagnose the proposed models, we will split the data set into a training set, composed of $N_\text{train} = 108$ observations, and a test data set, composed of $N_\text{test} = 107$ observations.

```{r fig-figures0011, fig.align='center', fig.width=8, fig.height=4, warning=FALSE}
#| fig-cap: "Left panel: smoothed absorbance curves on the training set. Right panel: smoothed absorbance curves on the test set."
set.seed(747)
N = nrow(tecator_data)
prop_train = .5
tecator_data = tecator_data |> 
  mutate(train = sample(x = rep(x = c(1, 0),
                                times = c(ceiling(N * prop_train),
                                          N - ceiling(N * prop_train)))))
g15 = tecator_data |>
  subset(train == 1) |>
  ggplot(mapping = aes(y = absorbance_basis,
                       color = fat20)) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = substitute("Smoothed Absorbance"),
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 950, 1000, 1050),
                     labels = c("850", "900", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange"))
g16 = tecator_data |>
  subset(train == 0) |>
  ggplot(mapping = aes(y = absorbance_basis,
                       color = fat20)) +
  geom_spaghetti() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = expression(paste("Wavelength ", "(in ", italic("nm"), ")")),
       y = substitute("Smoothed Absorbance"),
       col = "") +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 950, 1000, 1050),
                     labels = c("850", "900", "950", "1000", "1050"),
                     limits = c(845, 1055)) +
  scale_color_manual(values = c("green", "orange"))
grid.arrange(g15,
             g16,
             ncol = 2)
```

## Functional Generalized Linear Model

Noticing.

## Functional Generalized Additive Model

$$
  F\{t, D \chi_i(t)\} = \sum^K_{j_1 = 1}\sum^K_{j_2 = 1}\gamma_{j_1,j_2} \varphi_{j_1}(t) \varphi_{j_2}(D \chi_i (t))
$$

$$
  g^{-1}(\mu_i) = \beta_0 + \!\!\int^{1050}_{850} F\{s,D \chi_i(s)\} \text{d}s
$$

There are a panoply of settings to be tuned when estimating an FGAM, such as:

* The number of components on the functional additive term;
* The link function $g(\cdot)$ to be adopted;
* The family adopted in the fitting procedure;
* The estimating procedure of the smoothing components (if these are included);

amongst other. The third setting has been

$$
  \hat{G}_t(x) = N^{-1}\sum^N_{i=1}\textbf{1}_{(x, -\infty)}(\chi_i(t))
$$

$$
  \hat{H}_t(x) = N^{-1}\sum^N_{n = 1}\Phi\Bigg(\frac{x - X_i(t)}{h(t)}\Bigg)
$$

where
$$
  h(t) = \widehat{\mathbb{V}\text{ar}[X(t)]}.
$$
Due to an error, the <tt>fgam()</tt> function does not estimate the deviation parameter $\phi$. Therefore we have coupled the <tt>fgam()</tt> method from the <tt>refund</tt> <tt>R</tt> package and the <tt>gamlss()</tt> method from the <tt>gamlss</tt> <tt>R</tt> package in order to estimate it. 

```{r estimation0002, warning=FALSE, fig.align='center', fig.width=4, fig.height=4, fig.width=8, fig.height=4}
tecator_data = tecator_data |> mutate(dabsorbance_matrix = dabsorbance |> as.matrix(),
                                      fat = fat / 100)
theta_initial = 1
max_iterations = 1
theta_underfit = numeric(max_iterations)
theta_overfit = numeric(max_iterations)
theta_ideal = numeric(max_iterations)

iteration = 1
while(iteration <= max_iterations)
{
  fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
                                         bs = "tp",
                                         k = 4,
                                         m = 3),
             fitter = "gam",
             family = betar(link = "probit",
                            theta = 274.9405),
             tensortype = "te",
             data = tecator_data,
             weights = tecator_data$train,
             method = "REML")
  fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
                                        bs = "tp",
                                        k = 6,
                                        m = 3),
                     fitter = "gam",
                     family = betar(link = "probit",
                                  theta = 274.9405),
                     tensortype = "te",
                     data = tecator_data,
                     weights = tecator_data$train,
                     method = "REML",
                     scale = 0.05978584 ** -1)
  fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,
                                      bs = "tp",
                                      k = 5,
                                      m = 3),
                   fitter = "gam",
                   family = betar(link = "probit",
                                  theta = 274.9405),
                   tensortype = "te",
                   data = tecator_data,
                   weights = tecator_data$train,
                   method = "REML")
  iteration = iteration + 1
}

tecator_data = tecator_data |>
  mutate(fat_under = fit_underfit$fitted.values,
         fat_over = fit_overfit$fitted.values,
         fat_ideal = fit_ideal$fitted.values)

g17 = tecator_data |> select(fat_under, fat_over, fat_ideal, fat, train) |>
  melt(id.vars = c("fat",
                   "train")) |>
  mutate(fitted = value,
         model = sapply(X = as.character(variable),
                        switch,
                        "fat_under" = "Underfit",
                        "fat_over" = "Overfit",
                        "fat_ideal" = "Moderate") |>
           factor(levels = c("Underfit",
                             "Overfit",
                             "Moderate")),
         train = factor(x = ifelse(test = train == 1, "Train", "Test"),
                        levels = c("Train", "Test"))) |>
  mutate(value = NULL,
         variable = NULL) |>
  ggplot(mapping = aes(x = fitted,
                       y = fat,
                       color = train)) +
  geom_point() +
  theme_classic() +
  theme(text = element_text(size = unit(11, "pt"),
                            family = "LM Roman 10",
                            color = "black"),
        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"), 
                                                     ends = "last",
                                                     angle = 30,
                                                     type = "closed"),
                                 linewidth = .25),
        axis.ticks = element_line(color = "black",
                                  linewidth = .125),
        legend.position = "top") +
  labs(x = "Fitted",
       y = "True",
       col = "") +
  scale_color_manual(values = c("blue", "red")) +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(0, .5, 1),
                     labels = c("0", "1/2", "1"),
                     limits = c(0, 1)) +
  scale_y_continuous(expand = c(0, 0),
                     breaks = c(0, .5, 1),
                     labels = c("0", "1/2", "1"),
                     limits = c(0, 1)) +
  geom_abline(slope = 1,
              intercept = 0,
              linetype = "dashed") +
  facet_wrap(vars(model))
g17
fit = fit_ideal
```

```{r estimation0003, warning=FALSE, fig.align='center'}
se = smooth_estimates(fit) 
se = se |> mutate(x = (1048.9899 - 851.0101) * dabsorbance_matrix.tmat + 851.0101,
                  y = dabsorbance_matrix.omat) |>
  mutate(dabsorbance_matrix.tmat = NULL,
         dabsorbance_matrix.omat = NULL)
xx = seq(850, 1050, length.out = 99)
pol_up = data.frame(x = c(xx, rev(xx)),
                    y = c(apply(tecator_data$dabsorbance_matrix, 2, max), xx * 0 + .05))
pol_down = data.frame(x = c(xx, rev(xx)),
                      y = c(apply(tecator_data$dabsorbance_matrix, 2, min), xx * 0 - .025))
se |> 
  ggplot(mapping = aes(x = x,
                       y = y,
                       z = .estimate)) +
  geom_raster(aes(fill = .estimate)) +
  geom_polygon(inherit.aes = F,
               mapping = aes(x = x,
                             y = y),
               col = "white",
               fill = "white",
               data = pol_up) +
  geom_polygon(inherit.aes = F,
               mapping = aes(x = x,
                             y = y),
               col = "white",
               fill = "white",
               data = pol_down) +
  scale_y_continuous(expand = c(0, 0),
                     breaks = c(-0.02, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.05),
                     labels = c(substitute("-2/50"), substitute("-1/100"), "0", substitute("1/100"), substitute("2/50"),
                                substitute("3/100"), substitute("1/25"),
                                substitute("1/20"))) +
  scale_x_continuous(expand = c(0, 0),
                     breaks = c(850, 900, 950, 1000, 1050),
                     labels = c("850", "900", "950", "1000", "1050"),
                     limits = c(850, 1050))
```

### Residual Analysis

```{r estimation0004, warning=FALSE, fig.align='center'}
crack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],
                   zz = fit$fitted.values[ tecator_data$train == 1 ])

reg = gamlss(formula = ww ~-1. + zz,
             family = BE(mu.link = "identity",
                         sigma.link = "identity"),
             data = crack,
             mu.start = crack$zz,
             mu.fix = T)
plot(reg)

fit_total = fgam(formula = fat ~ af(X = dabsorbance_matrix,
                                    bs = "tp",
                                    k = 5,
                                    m = 3),
                 fitter = "gam",
                 family = betar(link = "probit"),
                 tensortype = "te",
                 data = tecator_data,
                 method = "REML",
                 scale = 0.05978584)

heroina = data.frame(ww = tecator_data$fat,
                     zz = fit_total$fitted.values)

reg = gamlss(formula = ww ~-1. + zz,
             family = BE(mu.link = "identity",
                         sigma.link = "identity"),
             data = heroina,
             mu.start = heroina$zz,
             mu.fix = T)
plot(reg)
```

Noticing

# Concluding Remarks

Noticing.

------------------------------------------------------------------------

[^1]: It is apparent from the acronyms GFLM and FGAM that the position of the terms 'Functional' and 'Generalized' are interchangeable when denoting these models. Indeed, some references (see for example @eckardt:2024) exchange the order of these terms in the latter acronym.

> "The test is over."<br>['Fight Test', The Flaming Lips (2002)](https://open.spotify.com/intl-pt/track/0ScgmigVOJr2mFsAtwFQmz?si=2f2e6b403e934f04)

# References
