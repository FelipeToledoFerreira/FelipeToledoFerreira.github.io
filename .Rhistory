factor(levels = c("Underfit",
"Overfit",
"Moderate")),
train = factor(x = ifelse(test = train == 1, "Train", "Test"),
levels = c("Train", "Test"))) |>
mutate(value = NULL,
variable = NULL)
tecator_data |> select(fat_under, fat_over, fat_ideal, fat, train) |> melt(id.vars = c("fat",
"train")) |>
mutate(fitted = value,
model = sapply(X = as.character(variable),
switch,
"fat_under" = "Underfit",
"fat_over" = "Overfit",
"fat_ideal" = "Moderate") |>
factor(levels = c("Underfit",
"Overfit",
"Moderate")),
train = factor(x = ifelse(test = train == 1, "Train", "Test"),
levels = c("Train", "Test"))) |>
mutate(value = NULL,
variable = NULL) |>
ggplot(mapping = aes(x = fitted,
y = fat,
color = train)) +
geom_point() +
theme_classic() +
theme(text = element_text(size = unit(11, "pt"),
family = "LM Roman 10",
color = "black"),
axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"),
ends = "last",
angle = 30,
type = "closed"),
linewidth = .25),
axis.ticks = element_line(color = "black",
linewidth = .125),
legend.position = "top") +
labs(x = "Fitted",
y = "True",
col = "") +
scale_color_manual(values = c("blue", "red")) +
scale_x_continuous(expand = c(0, 0),
breaks = c(0, .5, 1),
labels = c("0", "1/2", "1"),
limits = c(0, 1)) +
scale_y_continuous(expand = c(0, 0),
breaks = c(0, .5, 1),
labels = c("0", "1/2", "1"),
limits = c(0, 1)) +
geom_abline(slope = 1,
intercept = 0,
linetype = "dashed") +
facet_wrap(vars(model))
fit = fit_ideal
gam()
crack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],
zz = fit$fitted.values[ tecator_data$train == 1 ])
reg = gamlss(formula = ww ~-1. + zz,
family = BE(mu.link = "identity",
sigma.link = "identity"),
data = crack,
mu.start = crack$zz,
mu.fix = T)
plot(reg)
fit_total = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 5,
m = 3),
fitter = "gam",
family = betar(link = "probit"),
tensortype = "te",
data = tecator_data,
method = "REML",
scale = 0.05978584)
plot(x = fit_total$fitted.values,
y = tecator_data$fat)
heroina = data.frame(ww = tecator_data$fat,
zz = fit_total$fitted.values)
reg = gamlss(formula = ww ~-1. + zz,
family = BE(mu.link = "identity",
sigma.link = "identity"),
data = heroina,
mu.start = heroina$zz,
mu.fix = T)
plot(reg)
plot(reg,
family = "LM Roman 10")
fit_overfit$coefficients
fit_ideal$coefficients
fit_overfit
fit_underfit
fit_iideal
fit_ideal
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit"),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584)
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit"),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584)
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit"),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584)
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit"),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584)
fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 5,
m = 3),
fitter = "gam",
family = betar(link = "probit"),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584)
fit_ideal
fit_underfit
fit_overfit
fit_overfit$coefficients
fit_underfit$coefficients
fit_ideal$coefficients
reg = gamlss(formula = ww ~-1. + zz,
family = BE(mu.link = "identity",
sigma.link = "identity"),
data = crack,
mu.start = crack$zz,
mu.fix = T)
reg$sigma.coefficients
crack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],
zz = fit$fitted.values[ tecator_data$train == 1 ])
reg = gamlss(formula = ww ~-1. + zz,
family = BE(mu.link = "identity",
sigma.link = "identity"),
data = crack,
mu.start = crack$zz,
mu.fix = T)
reg$sigma.coefficients
(1 - 0.04490511^2)/(0.04490511^2)
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 494.9164),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 494.9164),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584 ** -1)
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 494.9164),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584 ** -1)
fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 5,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 494.9164),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 494.9164),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584 ** -1)
fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 5,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 494.9164),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
tecator_data = tecator_data |>
mutate(fat_under = fit_underfit$fitted.values,
fat_over = fit_overfit$fitted.values,
fat_ideal = fit_ideal$fitted.values)
fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 5,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 494.9164),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
tecator_data = tecator_data |>
mutate(fat_under = fit_underfit$fitted.values,
fat_over = fit_overfit$fitted.values,
fat_ideal = fit_ideal$fitted.values)
g17 = tecator_data |> select(fat_under, fat_over, fat_ideal, fat, train) |>
melt(id.vars = c("fat",
"train")) |>
mutate(fitted = value,
model = sapply(X = as.character(variable),
switch,
"fat_under" = "Underfit",
"fat_over" = "Overfit",
"fat_ideal" = "Moderate") |>
factor(levels = c("Underfit",
"Overfit",
"Moderate")),
train = factor(x = ifelse(test = train == 1, "Train", "Test"),
levels = c("Train", "Test"))) |>
mutate(value = NULL,
variable = NULL) |>
ggplot(mapping = aes(x = fitted,
y = fat,
color = train)) +
geom_point() +
theme_classic() +
theme(text = element_text(size = unit(11, "pt"),
family = "LM Roman 10",
color = "black"),
axis.line = element_line(arrow = grid::arrow(length = unit(0.08, "cm"),
ends = "last",
angle = 30,
type = "closed"),
linewidth = .25),
axis.ticks = element_line(color = "black",
linewidth = .125),
legend.position = "top") +
labs(x = "Fitted",
y = "True",
col = "") +
scale_color_manual(values = c("blue", "red")) +
scale_x_continuous(expand = c(0, 0),
breaks = c(0, .5, 1),
labels = c("0", "1/2", "1"),
limits = c(0, 1)) +
scale_y_continuous(expand = c(0, 0),
breaks = c(0, .5, 1),
labels = c("0", "1/2", "1"),
limits = c(0, 1)) +
geom_abline(slope = 1,
intercept = 0,
linetype = "dashed") +
facet_wrap(vars(model))
g17
fit = fit_ideal
crack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],
zz = fit$fitted.values[ tecator_data$train == 1 ])
reg = gamlss(formula = ww ~-1. + zz,
family = BE(mu.link = "identity",
sigma.link = "identity"),
data = crack,
mu.start = crack$zz,
mu.fix = T)
plot(reg)
reg$sigma.coefficients
(1 - 0.05811482^2)/(0.05811482^2)
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 295.0917),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 295.0917),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584 ** -1)
fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 5,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 295.0917),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit = fit_ideal
crack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],
zz = fit$fitted.values[ tecator_data$train == 1 ])
reg = gamlss(formula = ww ~-1. + zz,
family = BE(mu.link = "identity",
sigma.link = "identity"),
data = crack,
mu.start = crack$zz,
mu.fix = T)
reg$sigma.coefficients
(1 - 0.0600406^2)/(0.06004062^2)
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 276.402),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 276.402),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 276.402),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584 ** -1)
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 276.402),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 276.402),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584 ** -1)
fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 5,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 276.402),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit = fit_ideal
crack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],
zz = fit$fitted.values[ tecator_data$train == 1 ])
reg = gamlss(formula = ww ~-1. + zz,
family = BE(mu.link = "identity",
sigma.link = "identity"),
data = crack,
mu.start = crack$zz,
mu.fix = T)
reg$sigma.coefficients
(1 - 0.06019942^2)/(0.06019942^2)
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 274.9405),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 4,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 274.9405),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 274.9405),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584 ** -1)
fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 6,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 274.9405),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML",
scale = 0.05978584 ** -1)
fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,
bs = "tp",
k = 5,
m = 3),
fitter = "gam",
family = betar(link = "probit",
theta = 274.9405),
tensortype = "te",
data = tecator_data,
weights = tecator_data$train,
method = "REML")
fit = fit_ideal
crack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],
zz = fit$fitted.values[ tecator_data$train == 1 ])
plot(reg)
reg$sigma.coefficients
fit_ideal$deviance
fit_ideal$hat
eigen(fit_ideal$hat)
fit_ideal$null.deviance
fit_ideal$sig2
