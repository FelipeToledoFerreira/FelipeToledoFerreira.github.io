[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Felipe Ferreira",
    "section": "",
    "text": "I’m a Statistician, having received my bachelor’s degree in Statistics (2022) from the Federal University of Juiz de Fora and my Master’s degree in Statistics (2024) from the University of São Paulo. My main research interests are Functional Data Analysis and Approximate Inference.\nCheck out my undergraduate thesis (in Portuguese) or my Master’s thesis."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "vignettes.html",
    "href": "vignettes.html",
    "title": "R Vignettes",
    "section": "",
    "text": "This page consists of some Vignettes I have developed utilizing the R programming language.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAutomatic Relevance Determination for Functional Data Representation\n\n\n…a Vignette on Functional Data Analysis\n\n\nAn approach to functional data representation based on automatic relevance determination.\n\n\n\n\n\nJul 1, 2025\n\n\nFelipe Toledo Ferreira\n\n\n\n\n\n\n\n\n\n\n\n\nTecator Infratec Analyzer\n\n\n…a Vignette on Functional Data Analysis\n\n\nSome topics in functional regression presented utilizing the Tecator Infratec Analyzer dataset.\n\n\n\n\n\nJul 1, 2025\n\n\nFelipe Toledo Ferreira\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "vignettes.html#fast-and-sad",
    "href": "vignettes.html#fast-and-sad",
    "title": "Vignettes",
    "section": "Fast and sad",
    "text": "Fast and sad"
  },
  {
    "objectID": "vignettes.html#functional-data-analysis",
    "href": "vignettes.html#functional-data-analysis",
    "title": "Vignettes",
    "section": "Functional Data Analysis",
    "text": "Functional Data Analysis"
  },
  {
    "objectID": "vignette0001.html#data",
    "href": "vignette0001.html#data",
    "title": "Tecator Infratec Analyzer",
    "section": "",
    "text": "The Tecator Infratec Feed Analyzer data set (seen in [1]), is composed of data recorded on a Tecator Infratec Food and Feed Analyzer tool, working in the wavelength range 850 - 1050nm by the Near Infrared Transmission (NIT) principle. Each sample (\\(N = 215\\)) contains finely chopped pure meat with different moisture, fat and protein contents. For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is \\(-\\log_{10}\\) of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry (click here for further details)."
  },
  {
    "objectID": "vignette0001.html#setup",
    "href": "vignette0001.html#setup",
    "title": "Tecator Infratec Analyzer",
    "section": "",
    "text": "This vignette is primarily concerned with presenting a set of methods to perform functional regression, motivated by the Tecator Infratec Feed Analyzer dataset, and with computational tools provided by the R programming language. First, a number of packages must be downloaded and subsequently called. In particular, the ‘tidyfun’ package must be downloaded remotely, as it is not yet available on CRAN. The following chunk performs this step:\n\n\nCode\nlibrary(\"fda.usc\")    ## R package containing the 'tecator' dataset\n#&gt; Warning: pacote 'mgcv' foi compilado no R versão 4.4.3\nlibrary(\"tidyverse\")  ## R package for tidy data manipulation and visualization\n#&gt; Warning: pacote 'ggplot2' foi compilado no R versão 4.4.3\nlibrary(\"tf\")         ## R package for tidy functional data manipulation\nlibrary(\"tidyfun\")    ## R package for tidy functional data visualization\nlibrary(\"extrafont\")\nlibrary(\"gridExtra\")  ## R package for additional visualization tools\nlibrary(\"moments\")\nlibrary(\"corrplot\")\nlibrary(\"reshape2\")\nlibrary(\"refund\")\n#&gt; Warning: pacote 'refund' foi compilado no R versão 4.4.3\nlibrary(\"forcats\")\n\n\nThe ‘tecator’ dataset is sourced from the fda.usc package (see [2]). Noticeably, it is stored therein as a list object - this vignette converts this dataset to a data.frame object, via the tools made available on the tf package, which seeks to provide classes and methods for “Tidy Functional Data”, inspired by the greater existing tidyverse packages for data manipulation and visualization. The following chunk performs this conversion:\n\n\nCode\n## Importing the 'tecator' dataset\ndata(tecator)\n## Converting 'tecator' to df (data frame)\ntecator_data = data.frame(fat = tecator$y$Fat,\n                          water = tecator$y$Water,\n                          protein = tecator$y$Protein)\n## Adding the functional data, in tfd structure, to the df object\ntecator_data = tecator_data |&gt;\n  mutate(absorbance = tfd(data = tecator$absorp.fdata$data,\n                          arg = tecator$absorp.fdata$argvals))\n## Separating data by fat percentage\ntecator_data = tecator_data |&gt;\n  mutate(fat20 = factor(ifelse(test = (fat &gt;= 20),\n                               yes = \"20% &gt; Fat\",\n                               no = \"20% &lt; Fat\"),\n                        levels = c(\"20% &gt; Fat\",\n                                   \"20% &lt; Fat\")))\n\n\nTable 1 illustrates how functional data is stored within a data.frame object through the implementation of the tf package - in particular, the absorbance column is stored as a tfd object, such that, to every row within the resulting data frame, there exists a corresponding functional observation.\n\n\n\nTable 1: Snapshot of the five first rows of the ‘tecator’ dataset. Note that the column labelled as ‘absorbance’ is composed of ‘tfd’ objects, from the ‘tidyfun’ R package.\n\n\n\n\n\nfat\nwater\nprotein\nabsorbance\nfat20\n\n\n\n\n22.5\n60.5\n16.7\n1: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n40.1\n46.0\n13.5\n2: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n8.4\n71.0\n20.5\n3: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n5.9\n72.8\n20.7\n4: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n25.5\n58.3\n15.5\n5: (850,3);(852,3);(854,3); …\n20% &gt; Fat"
  },
  {
    "objectID": "vignette0001.html#fat-percentage",
    "href": "vignette0001.html#fat-percentage",
    "title": "Tecator Infratec Analyzer",
    "section": "Fat percentage",
    "text": "Fat percentage\nExpressly, the main goal of this application is to construct a predictive model for the fat percentage of the meat samples, utilizing corresponding absorbance curves as model covariates. For that purpose, first a simple exploratory analysis of the data must be performed, to allow for model elicitation. ?@fig-figures0001 and Table 2 seen below provide a brief view of the distribution of the fat percentage. Hereafter, the observed values of fat percentage in the dataset may also be referred to as \\(y_1,\\ldots,y_{215}\\), which is assumed to be sampled from a set of independent random variables \\(Y_1,\\ldots,Y_{215}\\) with unknown distribution.\n\n\nCode\nknitr::kable(head(tecator_data, 5), align = 'rrrcl')\n\n\n\n\n\n\n\nfat\nwater\nprotein\nabsorbance\nfat20\n\n\n\n\n22.5\n60.5\n16.7\n1: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n40.1\n46.0\n13.5\n2: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n8.4\n71.0\n20.5\n3: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n5.9\n72.8\n20.7\n4: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n25.5\n58.3\n15.5\n5: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n\n\n\nFigure 1: Left panel: sample estimated density of the fat percentage. Right panel: sample boxplot of the fat percentage.\n\n\n\n\nCode\ng01 = tecator$y |&gt; ggplot(mapping = aes(x = Fat)) +\n  geom_density(fill = \"cyan\",\n               alpha = .25,\n               linetype = \"dashed\") +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 size = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  size = .125)) +\n  labs(x = \"Fat %\",\n       y = \"Density\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.05),\n                     labels = c(\"0\", substitute(\"1/100\"), substitute(\"2/50\"), substitute(\"3/100\"), substitute(\"1/25\"), substitute(\"1/20\")),\n                     limits = c(0, 0.05)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(5, 15, 25, 35, 45),\n                     labels = c(\"5\", \"15\", \"25\", \"35\", \"45\"),\n                     limits = c(0.9, 49.1))\n#&gt; Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\ng02 = tecator$y |&gt; ggplot(mapping = aes(x = Fat)) +\n  geom_boxplot(fill = \"magenta\",\n               alpha = .5) +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 size = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  size = .125),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.minor.ticks.y.left = element_blank()) +\n  labs(x = \"Fat %\",\n       y = \"Density\")\n\ngrid.arrange(g01,\n             g02,\n             widths = c(1, 1),\n             ncol = 2)\n\n\n\n\n\n\n\n\nFigure 2: Left panel: sample estimated density of the fat percentage. Right panel: sample boxplot of the fat percentage.\n\n\n\n\n\n\n\n\nTable 2: Sample summary statistics of the fat percentage.\n\n\n\n\n\nMin.\n1st Qu.\nMedian\nMean\n3rd Qu.\nMax.\n\n\n\n\n0.9\n7.3\n14\n18.142\n28\n49.1\n\n\n\n\n\n\nAdditionally, the sample skewness and kurtosis were computed as \\(\\widehat{\\text{Skew}}(Y) \\approx 0.802\\) and \\(\\widehat{\\text{Kurt}}(Y) \\approx 2.573\\). As the data refers to a percentage value, its support is bounded on the interval \\([0,100]\\), which may be normalized to the unit interval \\([0,1]\\) for computatibility purposes. As none of the observed values are at the boundaries \\(0\\) or \\(1\\) (and it is reasonable to assume that no observation will attain this value), the fat percentage may likewise be assumed to belong to the strictly closed \\((0,100)\\) interval. Generalized linear models may consequently be more appropriate to model this form of data, in particular for families with bounded support (e.g.: Beta regression)."
  },
  {
    "objectID": "vignette0001.html#absorbance-curves",
    "href": "vignette0001.html#absorbance-curves",
    "title": "Tecator Infratec Analyzer",
    "section": "Absorbance curves",
    "text": "Absorbance curves\nThe absorbance curve data, unlike the fat percentage data seen in the previous subsections, is composed of values obtainted discreetly by subjecting each of the meat samples to a spectrometric measuring device varying in the 850 - 1050nm wavelength range uniformly, with \\(100\\) equal design points across all meat samples. This results in \\(100 \\cdot 215 = 21500\\) observations in total. Figure 3 and Figure 4 provide a brief analysis on the distribution of the data; the plotted data is composed of the raw (i.e.: not smoothed) data. As previous reports have indicated the presence of an additional peak on the absorbance curves around the 930nm wavelength for meat samples with fat percentage superceding 20, the data are separated amongst these two groups.\n\n\nCode\ng03 = tecator_data |&gt;\n  ggplot(mapping = aes(y = absorbance,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = \"Absorbance\",\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng04 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(mean_absorbance = mean(absorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &gt; Fat\",\n                                   \"20% &lt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          mean_absorbance = mean(tecator_data$absorbance)) |&gt;\n  ggplot(mapping = aes(y = mean_absorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = \"Absorbance\",\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ngrid.arrange(g03,\n             g04,\n             ncol = 2)\n\n\n\n\n\n\n\n\nFigure 3: Left panel: spaghetti plot of the absorbance curves, separated by fat percentage. Right panel: mean absorbance curves, separated by fat percentage.\n\n\n\n\n\n\n\nCode\ng05 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(var_absorbance = var(absorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          var_absorbance = var(tecator_data$absorbance)) |&gt;\n  ggplot(mapping = aes(y = var_absorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(\"Absorbance\"^2),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng06 = melt(data = cor(tecator$absorp.fdata$data)) |&gt;\n  mutate(x = 850 + 200 * (Var1 - 1) / 99,\n         y = 850 + 200 * (Var2 - 1) / 99,\n         z = value,\n         Var1 = NULL,\n         Var2 = NULL,\n         value = NULL) |&gt;\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       fill = z)) +\n  geom_raster() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 size = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  size = .125),\n        legend.position = \"top\",\n        plot.margin = unit(c(.25, .75, .25, .75), \"cm\")) +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       fill = \"Correlation\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_fill_continuous(type = \"viridis\")\ngrid.arrange(g05,\n             g06,\n             ncol = 2)\n\n\n\n\n\n\n\n\nFigure 4: Left panel: absorbance variance curves, separated by fat percentage. Right panel: correlogram of the absorbance curves.\n\n\n\n\n\nFrom a modelling standpoint, the values obtained at each design point may be considered covariates \\(x_{i,1},\\ldots,x_{i,100}\\), for \\(i \\in \\{1,\\ldots,215\\}\\), and as \\(100 = p &lt; N = 215\\), even a simple linear regression model is feasible. However, as evidenced in the Right panel of Figure @ref(fig:figures0003), the data is highly correlated. Note that the minimum absolute correlation observed across the absorbance curves was \\(\\min_{i,j}\\{\\vert \\rho_{i,j} \\vert\\} \\approx 0.963\\). This implies that, were the data applied indiscriminately in a simpler linear regression model, it would be subject to a significant amount of multicollinearity. Alternatively, each absorbance curve may be considered a functional covariate \\(\\chi_{1},\\ldots,\\chi_{215}\\), which may be estimated by smoothing the discrete observed values, allowing for a more flexible form of high-dimensional modelling through functional regression. Adopting the purview of functional data analysis in this context also presents other advantages: functionals (i.e.: derivatives, integrals, etc.) of the data in question may likewise be explored. It is important to remark that the values of these functionals is dependent on the support of the data in question. The method ‘tf_derive()’, part of the ‘tf’ ‘R’ package, allows for the computation of the first-order derivative of the absorbance curves. Table Table 3 provides a view of the inclusion of the derivative column.\n\n\n\nTable 3: Comparisons of the ‘absorbance’ and ‘dabsorbance’ columns of the five first rows of the ‘tecator’ dataset. The column labelled as ‘dabsorbance’ is composed of ‘tfd’ objects, and represents the first order derivative of the ‘absorbance’ column, as computed via finite differences.\n\n\n\n\n\n\n\n\n\n\nfat\nabsorbance\ndabsorbance\n\n\n\n\n22.5\n1: (850,3);(852,3);(854,3); …\n1: (851,2e-04);(853,2e-04);(855,3e-04); …\n\n\n40.1\n2: (850,3);(852,3);(854,3); …\n2: (851,0.002);(853,0.002);(855,0.002); …\n\n\n8.4\n3: (850,3);(852,3);(854,3); …\n3: (851,9e-04);(853,8e-04);(855,9e-04); …\n\n\n5.9\n4: (850,3);(852,3);(854,3); …\n4: (851,9e-04);(853,8e-04);(855,9e-04); …\n\n\n25.5\n5: (850,3);(852,3);(854,3); …\n5: (851,9e-04);(853,9e-04);(855,9e-04); …\n\n\n\n\n\n\nAs similarly seen in previous reports, the derivative of the absorbance curves is significantly different for meat samples with fat percentage greater than 20%, as illustrated by Figure 5 and Figure 6. Unlike the usual absorbance curves, in this context the minimum absolute correlation observed across the derivatives of the absorbance curves is \\(\\min_{i,j}\\{\\vert \\tilde{\\rho}_{i,j} \\vert\\} \\approx 0\\). The \\(D\\) symbol is adopted to denote the application of the derivative. Note, in the Right panel of Figure 6, that the correlogram presents a steep decrease in correlation between the 930nm and 950nm wavelengths. This corresponds to a steep valley in the mean function for the data with fat percentage greater than 20, as seen in the Right panel of Figure 5.\n\n\nCode\ng07 = tecator_data |&gt;\n  ggplot(mapping = aes(y = dabsorbance,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(italic(\"D\"), \"Absorbance\")),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\"))\ng08 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(mean_dabsorbance = mean(dabsorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          mean_dabsorbance = mean(tecator_data$dabsorbance)) |&gt;\n  ggplot(mapping = aes(y = mean_dabsorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(italic(\"D\"), \"Absorbance\")),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\"))\ngrid.arrange(g07,\n             g08,\n             ncol = 2)\n\n\n\n\n\n\n\n\nFigure 5: Left panel: spaghetti plot of the derivative of the absorbance curves, separated by fat percentage. Right panel: mean derivative of the absorbance curves, separated by fat percentage.\n\n\n\n\n\n\n\nCode\ng09 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(var_dabsorbance = var(dabsorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          var_dabsorbance = var(tecator_data$dabsorbance)) |&gt;\n  ggplot(mapping = aes(y = var_dabsorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(\"(\", italic(\"D\"), \"Absorbance)\"^2)),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\"))\ng10 = tecator_data$dabsorbance |&gt;\n  as.matrix() |&gt;\n  cor() |&gt;\n  melt() |&gt;\n  mutate(x = Var1,\n         y = Var2,\n         z = value,\n         Var1 = NULL,\n         Var2 = NULL,\n         value = NULL) |&gt;\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       fill = z)) +\n  geom_raster() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 size = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  size = .125),\n        legend.position = \"top\",\n        plot.margin = unit(c(.25, .75, .25, .75), \"cm\")) +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       fill = \"Correlation\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_fill_continuous(type = \"viridis\")\ngrid.arrange(g09,\n             g10,\n             ncol = 2)\n\n\n\n\n\n\n\n\nFigure 6: Left panel: variance of the derivative of the absorbance curves, separated by fat percentage. Right panel: correlogram of the derivative of the absorbance curves.\n\n\n\n\n\nAn usual problem when dealing with multivariate data is that, in the absence of greater context, there is no singular approach to determining a ranking of observations. This is also true of functional data, hence there is no specific way to determine functional quantiles, nor a universal definition of a functional outlier. [3] defines a form of functional depth, which allows for the computation of the functional median (as well as other quantiles), a work which was latter expanded in [4], wherein the procedure to construct a functional boxplot was delineated, allowing also for outlier detection. The computational implementation of functional boxplots is available in the ‘fda’ package for the R programming language, as part of the method fbplot(). Moreover, the computation of the functional depth developed in [3] is available in the tf package through the tf_depth() method. Figure 7 displays functional boxplots of the absorbance curves, as well as their corresponding derivatives. Interesting insights may be gleaned with respect to manner in which functional depth detects outliers: in the first boxplot the observations \\(43\\), \\(44\\), \\(99\\), \\(140\\) and \\(185\\) are classified as outliers, whilst for the second boxplot, only the observation \\(140\\) is classified as an outlier. This is a sensible result, as it may be observed that the outlier observations in the former plot present significant vertical shift with respect to the median curves, and the first order derivative of a function is invariant with respect to any constant term (i.e., any constant vertical shift), hence the application of the derivative ‘standardizes’ the absorbance curves. Figure 8 enhances previous plots seen in Figure 3 and Figure 5 by highlighting outlier curves. As previously stated, the outlier curves for the absorbance curves possess significant vertical shift ‘upwards’, i.e., they are consistently greater than the mass of functional data, but also present a similar overall ‘shape’. By contrast, the sole outlier for the derivative of the absorbance curves presents more complex behaviour, initially being greater than the mass of functional data, and crossing over so that it is lesser. We note, from Figure Figure 9, that the functional mean and median are very similar in the case of the derivative of the absorbance curves, whilst for the absorbance curves themselves there is indication of positive skewness, particularly for curves whose corresponding meat sample has more than 20% of fat.\n\n\n\n\n\n\n\n\nFigure 7: Upper panel: functional boxplots of the absorbance curves. Lower panel: functional boxplots of the derivative of the absorbance curves.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Upper panel: spaghetti plot of the absorbance curves, separated by fat percentage, with outlier curves highlighted in black; observation \\(140\\) is likewise dashed. Lower panel: spaghetti plot of the derivative of the absorbance curves, separated by fat percentage, with outlier curves highlighted in black.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Upper panel: mean and median absorbance curves, separated by fat percentage, represented respectively by solid and dashed curves. Lower panel: mean and median derivative of the absorbance curves, separated by fat percentage, represented respectively by solid and dashed curves.\n\n\n\n\n\nNote that Figure 3, Figure 4 and Figure 5 display the raw absorbance curves (and corresponding derivatives), that is, we employ no smoothing techniques in those displays. This is feasible for this particular data set due to the fact that the absorbance curves (and corresponding derivatives) are contaminated by very little noise. The method tfb(), of the ‘tidyfun’ allows us to represent variables originally stored as tfd objects, ideal for raw functional data, to variables stored as tfb functional data, which is ideal for representing functional data as a linear combination of a finite number of basis functions; this is done by an interface with methods on the ‘mgcv’ R package. In particular, we will smooth the usual absorbance curves utilizing \\(K = 15\\) B-spline basis, whilst the derivatives of the absorbance curves will be smoothed utilizing \\(K = 30\\) B-spline basis. The results are presented in Figures Figure 10 and Figure 11. Whilst certain distinctions are visible between the raw and smoothed data, it is apparent that the smoothed data provides a reasonable approximation to the sampled curves. Moreover, we note that the tfb() method itself provides a diagnostic with respect to the amount of variability preserved in the basis representation (which is ommited in the present study, but is exhibited by setting the argument verbose = TRUE): for both generated tfb objects the basis representations preserve a minimum of \\(99.8\\%\\) variability. We may now proceed to studying the functional regression problem.\n\n\nCode\ntecator_data = tecator_data |&gt; mutate(absorbance_basis = tfb(absorbance,\n                                                             basis = \"spline\",\n                                                             bs = \"bs\",\n                                                             k = 15,\n                                                             verbose = FALSE),\n                                      dabsorbance_basis = tfb(dabsorbance,\n                                                              basis = \"spline\",\n                                                              bs = \"bs\",\n                                                              k = 30,\n                                                              verbose = FALSE))\ng13 = tecator_data |&gt;\n  ggplot(mapping = aes(y = absorbance_basis,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(\"Smoothed Absorbance\"),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ngrid.arrange(g03,\n             g13,\n             ncol = 2)\n\n\n\n\n\n\n\n\nFigure 10: Left panel: raw absorbance curves. Right panel: smoothed absorbance curves.\n\n\n\n\n\n\n\nCode\ng14 = tecator_data |&gt;\n  ggplot(mapping = aes(y = dabsorbance_basis,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(\"Smoothed \",italic(\"D\"),\"Absorbance\")),,\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\"))\ngrid.arrange(g07,\n             g14,\n             ncol = 2)\n\n\n\n\n\n\n\n\nFigure 11: Left panel: raw derivative of the absorbance curves. Right panel: smoothed derivative of the absorbance curves."
  },
  {
    "objectID": "vignette0001.html#model-i",
    "href": "vignette0001.html#model-i",
    "title": "Tecator Infratec Analyzer",
    "section": "Model I",
    "text": "Model I\nNoticing."
  },
  {
    "objectID": "vignette0001.html#model-ii",
    "href": "vignette0001.html#model-ii",
    "title": "Tecator Infratec Analyzer",
    "section": "Model II",
    "text": "Model II\n\n\nCode\ntecator_data$dabsorbance_matrix = tecator_data$dabsorbance |&gt; as.matrix()\ntecator_data = tecator_data |&gt; mutate(fat = fat / 100)\nfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                               bs = \"tp\",\n                               k = 5,\n                               m = 3),\n           fitter = \"gam\",\n           family = betar(link = \"logit\"),\n           tensortype = \"te\",\n           data = tecator_data,\n           weights = tecator_data$train,\n           method = \"REML\",\n           scale = 0.06361)\n\ntecator_data = tecator_data |&gt;\n  mutate(fat_fitted = fit$fitted.values)\n\ng17 = tecator_data |&gt;\n  mutate(train = factor(x = ifelse(test = tecator_data$train == 1, \"Train\", \"Test\"),\n                        levels = c(\"Train\", \"Test\"))) |&gt;\n  ggplot(mapping = aes(x = fat_fitted,\n                       y = fat,\n                       color = train)) +\n  geom_point() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = \"Fitted\",\n       y = \"True\",\n       col = \"\") +\n  scale_color_manual(values = c(\"blue\", \"red\")) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"0\", \"1/2\", \"1\"),\n                     limits = c(0, 1)) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"0\", \"1/2\", \"1\"),\n                     limits = c(0, 1)) +\n  geom_abline(slope = 1,\n              intercept = 0,\n              linetype = \"dashed\")\n  \ng17\n\n\n\n\n\n\n\n\n\nResiduals\n\n\nCode\nlibrary(\"gamlss\")\n#&gt; Carregando pacotes exigidos: gamlss.data\n#&gt; \n#&gt; Anexando pacote: 'gamlss.data'\n#&gt; O seguinte objeto é mascarado por 'package:datasets':\n#&gt; \n#&gt;     sleep\n#&gt; Carregando pacotes exigidos: gamlss.dist\n#&gt; Carregando pacotes exigidos: parallel\n#&gt;  **********   GAMLSS Version 5.4-22  **********\n#&gt; For more on GAMLSS look at https://www.gamlss.com/\n#&gt; Type gamlssNews() to see new features/changes/bug fixes.\n#&gt; \n#&gt; Anexando pacote: 'gamlss'\n#&gt; O seguinte objeto é mascarado por 'package:refund':\n#&gt; \n#&gt;     re\n#&gt; O seguinte objeto é mascarado por 'package:mgcv':\n#&gt; \n#&gt;     lp\ncrack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],\n                   zz = fit$fitted.values[ tecator_data$train == 1 ])\n\nreg = gamlss(formula = ww ~ zz,\n             family = BE(mu.link = \"identity\",\n                         sigma.link = \"identity\"),\n             data = crack)\n#&gt; GAMLSS-RS iteration 1: Global Deviance = -257.1634 \n#&gt; GAMLSS-RS iteration 2: Global Deviance = -452.3448 \n#&gt; GAMLSS-RS iteration 3: Global Deviance = -535.9769 \n#&gt; GAMLSS-RS iteration 4: Global Deviance = -537.3277 \n#&gt; GAMLSS-RS iteration 5: Global Deviance = -537.3282\nplot(reg)\n\n\n\n\n\n\n\n\n#&gt; ******************************************************************\n#&gt;        Summary of the Quantile Residuals\n#&gt;                            mean   =  0.0306589 \n#&gt;                        variance   =  1.008963 \n#&gt;                coef. of skewness  =  -0.4881235 \n#&gt;                coef. of kurtosis  =  3.368245 \n#&gt; Filliben correlation coefficient  =  0.9901213 \n#&gt; ******************************************************************\n\nfit_total = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                                    bs = \"tp\",\n                                    k = 5,\n                                    m = 3),\n                 fitter = \"gam\",\n                 family = betar(link = \"logit\"),\n                 tensortype = \"te\",\n                 data = tecator_data,\n                 method = \"REML\",\n                 scale = 0.112152)\n\nplot(x = fit_total$fitted.values,\n     y = tecator_data$fat)\n\n\n\n\n\n\n\n\nCode\n\nheroina = data.frame(ww = tecator_data$fat,\n                     zz = fit_total$fitted.values)\n\nreg = gamlss(formula = ww ~ zz,\n             family = BE(mu.link = \"identity\",\n                         sigma.link = \"identity\"),\n             data = heroina)\n#&gt; GAMLSS-RS iteration 1: Global Deviance = -511.795 \n#&gt; GAMLSS-RS iteration 2: Global Deviance = -888.5879 \n#&gt; GAMLSS-RS iteration 3: Global Deviance = -1045.234 \n#&gt; GAMLSS-RS iteration 4: Global Deviance = -1047.916 \n#&gt; GAMLSS-RS iteration 5: Global Deviance = -1047.917 \n#&gt; GAMLSS-RS iteration 6: Global Deviance = -1047.917\nplot(reg)\n\n\n\n\n\n\n\n\n#&gt; ******************************************************************\n#&gt;        Summary of the Quantile Residuals\n#&gt;                            mean   =  0.04270085 \n#&gt;                        variance   =  1.004243 \n#&gt;                coef. of skewness  =  -0.7922292 \n#&gt;                coef. of kurtosis  =  4.073507 \n#&gt; Filliben correlation coefficient  =  0.9811175 \n#&gt; ******************************************************************\n\nNoticing"
  },
  {
    "objectID": "vignette0001.html",
    "href": "vignette0001.html",
    "title": "Tecator Infratec Analyzer",
    "section": "",
    "text": "The Tecator Infratec Feed Analyzer data set (seen in [1]), is composed of data recorded on a Tecator Infratec Food and Feed Analyzer tool, working in the wavelength range 850 - 1050nm by the Near Infrared Transmission (NIT) principle. Each sample (\\(N = 215\\)) contains finely chopped pure meat with different moisture, fat and protein contents. For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is \\(-\\log_{10}\\) of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry (click here for further details).\n\n\n\nThis vignette is primarily concerned with presenting a set of methods to perform functional regression, motivated by the Tecator Infratec Feed Analyzer dataset, and with computational tools provided by the R programming language. First, a number of packages must be downloaded and subsequently called. In particular, the ‘tidyfun’ package must be downloaded remotely, as it is not yet available on CRAN. The following chunk performs this step:\n\n\nCode\nlibrary(\"fda.usc\")    ## R package containing the 'tecator' dataset\n#&gt; Warning: pacote 'mgcv' foi compilado no R versão 4.4.3\nlibrary(\"tidyverse\")  ## R package for tidy data manipulation and visualization\n#&gt; Warning: pacote 'ggplot2' foi compilado no R versão 4.4.3\nlibrary(\"tf\")         ## R package for tidy functional data manipulation\nlibrary(\"tidyfun\")    ## R package for tidy functional data visualization\nlibrary(\"extrafont\")\nlibrary(\"gridExtra\")  ## R package for additional visualization tools\nlibrary(\"moments\")\nlibrary(\"corrplot\")\nlibrary(\"reshape2\")\nlibrary(\"refund\")\n#&gt; Warning: pacote 'refund' foi compilado no R versão 4.4.3\nlibrary(\"forcats\")\n\n\nThe ‘tecator’ dataset is sourced from the fda.usc package (see [2]). Noticeably, it is stored therein as a list object - this vignette converts this dataset to a data.frame object, via the tools made available on the tf package, which seeks to provide classes and methods for “Tidy Functional Data”, inspired by the greater existing tidyverse packages for data manipulation and visualization. The following chunk performs this conversion:\n\n\nCode\n## Importing the 'tecator' dataset\ndata(tecator)\n## Converting 'tecator' to df (data frame)\ntecator_data = data.frame(fat = tecator$y$Fat,\n                          water = tecator$y$Water,\n                          protein = tecator$y$Protein)\n## Adding the functional data, in tfd structure, to the df object\ntecator_data = tecator_data |&gt;\n  mutate(absorbance = tfd(data = tecator$absorp.fdata$data,\n                          arg = tecator$absorp.fdata$argvals))\n## Separating data by fat percentage\ntecator_data = tecator_data |&gt;\n  mutate(fat20 = factor(ifelse(test = (fat &gt;= 20),\n                               yes = \"20% &gt; Fat\",\n                               no = \"20% &lt; Fat\"),\n                        levels = c(\"20% &gt; Fat\",\n                                   \"20% &lt; Fat\")))\n\n\nTable 1 illustrates how functional data is stored within a data.frame object through the implementation of the tf package - in particular, the absorbance column is stored as a tfd object, such that, to every row within the resulting data frame, there exists a corresponding functional observation.\n\n\n\nTable 1: Snapshot of the five first rows of the ‘tecator’ dataset. Note that the column labelled as ‘absorbance’ is composed of ‘tfd’ objects, from the ‘tidyfun’ R package.\n\n\n\n\n\nfat\nwater\nprotein\nabsorbance\nfat20\n\n\n\n\n22.5\n60.5\n16.7\n1: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n40.1\n46.0\n13.5\n2: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n8.4\n71.0\n20.5\n3: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n5.9\n72.8\n20.7\n4: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n25.5\n58.3\n15.5\n5: (850,3);(852,3);(854,3); …\n20% &gt; Fat"
  },
  {
    "objectID": "vignettes/vignette0001.html",
    "href": "vignettes/vignette0001.html",
    "title": "Tecator Infratec Analyzer",
    "section": "",
    "text": "Last updated 2025/07/01."
  },
  {
    "objectID": "vignettes/vignette0001.html#data",
    "href": "vignettes/vignette0001.html#data",
    "title": "Tecator Infratec Analyzer",
    "section": "Data",
    "text": "Data\nThe Tecator Infratec Feed Analyzer data set (seen in Ferraty and Vieu (2006)), is composed of data recorded on a Tecator Infratec Food and Feed Analyzer tool, working in the wavelength range 850 - 1050nm by the Near Infrared Transmission (NIT) principle. Each sample (\\(N = 215\\)) contains finely chopped pure meat with different moisture, fat and protein contents. For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is \\(-\\log_{10}\\) of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry (click here for further details)."
  },
  {
    "objectID": "vignettes/vignette0001.html#setup",
    "href": "vignettes/vignette0001.html#setup",
    "title": "Tecator Infratec Analyzer",
    "section": "Setup",
    "text": "Setup\nThis vignette is primarily concerned with presenting a set of methods to perform functional regression, motivated by the Tecator Infratec Feed Analyzer dataset, and with computational tools provided by the R programming language. First, a number of packages must be downloaded and subsequently called. In particular, the ‘tidyfun’ package must be downloaded remotely, as it is not yet available on CRAN. The following chunk performs this step:\n\n\nShow R code\nlibrary(\"fda.usc\")    ## R package containing the 'tecator' dataset\nlibrary(\"tidyverse\")  ## R package for tidy data manipulation and visualization\nlibrary(\"tf\")         ## R package for tidy functional data manipulation\nlibrary(\"tidyfun\")    ## R package for tidy functional data visualization\nlibrary(\"extrafont\")\nlibrary(\"moments\")    ## R package for computing sample moments\nlibrary(\"corrplot\")   ## R package for visualizing correlograms\nlibrary(\"reshape2\")   ## R package for data manipulation\nlibrary(\"refund\")     ## R package for functional regression\nlibrary(\"forcats\")    ## R package for data manipulation, particularly factors\nlibrary(\"gratia\")     ## R package for visualizing additive models\nlibrary(\"gamlss\")     ## R package for generalized additive models for location, scale and shape\nlibrary(\"patchwork\")  ## R package for plot composition\nlibrary(\"magrittr\")   ## R package for pipes\n\n\nThe ‘tecator’ dataset is sourced from the fda.usc package (see Febrero-Bande and Oviedo de la Fuente (2012)). Noticeably, it is stored therein as a list object - this vignette converts this dataset to a data.frame object, via the tools made available on the tf package, which seeks to provide classes and methods for “Tidy Functional Data”, inspired by the greater existing tidyverse packages for data manipulation and visualization. The following chunk performs this conversion:\n\n\nShow R code\n## Importing the 'tecator' dataset\ndata(tecator)\n## Converting 'tecator' to df (data frame)\ntecator_data = data.frame(fat = tecator$y$Fat,\n                          water = tecator$y$Water,\n                          protein = tecator$y$Protein)\n## Adding the functional data, in tfd structure, to the df object\ntecator_data %&lt;&gt;%\n  mutate(absorbance = tfd(data = tecator$absorp.fdata$data,\n                          arg = tecator$absorp.fdata$argvals))\n## Separating data by fat percentage\ntecator_data %&lt;&gt;%\n  mutate(fat20 = factor(ifelse(test = (fat &gt;= 20),\n                               yes = \"20% &gt; Fat\",\n                               no = \"20% &lt; Fat\"),\n                        levels = c(\"20% &gt; Fat\",\n                                   \"20% &lt; Fat\")))\n\n\nTable 1 illustrates how functional data is stored within a data.frame object through the implementation of the tf package - in particular, the absorbance column is stored as a tfd object, such that, to every row within the resulting data frame, there exists a corresponding functional observation.\n\n\n\n\n\n\nfat\nwater\nprotein\nabsorbance\nfat20\n\n\n\n\n22.5\n60.5\n16.7\n1: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n40.1\n46.0\n13.5\n2: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n8.4\n71.0\n20.5\n3: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n5.9\n72.8\n20.7\n4: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n25.5\n58.3\n15.5\n5: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n\n\n\nTable 1: Snapshot of the five first rows of the ‘tecator’ dataset. Note that the column labelled as ‘absorbance’ is composed of ‘tfd’ objects, from the ‘tidyfun’ R package."
  },
  {
    "objectID": "vignettes/vignette0001.html#fat-percentage",
    "href": "vignettes/vignette0001.html#fat-percentage",
    "title": "Tecator Infratec Analyzer",
    "section": "Fat percentage",
    "text": "Fat percentage\nExpressly, the main goal of this application is to construct a predictive model for the fat percentage of the meat samples, utilizing corresponding absorbance curves as model covariates. For that purpose, first a simple exploratory analysis of the data must be performed, to allow for model elicitation. Figure 1 and Table 2 seen below provide a brief view of the distribution of the fat percentage. Hereafter, the observed values of fat percentage in the dataset may also be referred to as \\(y_1,\\ldots,y_{215}\\), which is assumed to be sampled from a set of independent random variables \\(Y_1,\\ldots,Y_{215}\\) with unknown distribution.\n\n\nShow R code\ng01 = tecator$y |&gt; ggplot(mapping = aes(x = Fat)) +\n  geom_density(fill = \"cyan\",\n               alpha = .25,\n               linetype = \"dashed\") +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125)) +\n  labs(x = \"Fat %\",\n       y = \"Density\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.05),\n                     labels = c(\"0\", substitute(\"1/100\"), substitute(\"2/50\"),\n                                substitute(\"3/100\"), substitute(\"1/25\"),\n                                substitute(\"1/20\")),\n                     limits = c(0, 0.05)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(5, 15, 25, 35, 45),\n                     labels = c(\"5\", \"15\", \"25\", \"35\", \"45\"),\n                     limits = c(0.9, 49.1))\ng02 = tecator$y |&gt; ggplot(mapping = aes(x = Fat)) +\n  geom_boxplot(fill = \"magenta\",\n               alpha = .5) +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.minor.ticks.y.left = element_blank()) +\n  labs(x = \"Fat %\",\n       y = \"Density\")\ng01 + g02\n\n\n\n\n\n\n\n\nFigure 1: Left panel: sample estimated density of the fat percentage. Right panel: sample boxplot of the fat percentage.\n\n\n\n\n\n\n\n\n\n\n\nMin.\n1st Qu.\nMedian\nMean\n3rd Qu.\nMax.\n\n\n\n\n0.9\n7.3\n14\n18.142\n28\n49.1\n\n\n\n\n\nTable 2: Sample summary statistics of the fat percentage.\n\n\n\nAdditionally, the sample skewness and kurtosis were computed as \\(\\widehat{\\text{Skew}}(Y) \\approx 0.802\\) and \\(\\widehat{\\text{Kurt}}(Y) \\approx 2.573\\). As the data refers to a percentage value, its support is bounded on the interval \\([0,100]\\), which may be normalized to the unit interval \\([0,1]\\) for computatibility purposes. As none of the observed values are at the boundaries \\(0\\) or \\(1\\) (and it is reasonable to assume that no observation will attain this value), the fat percentage may likewise be assumed to belong to the strictly closed \\((0,100)\\) interval. Generalized linear models may consequently be more appropriate to model this form of data, in particular for families with bounded support (e.g.: Beta regression)."
  },
  {
    "objectID": "vignettes/vignette0001.html#absorbance-curves",
    "href": "vignettes/vignette0001.html#absorbance-curves",
    "title": "Tecator Infratec Analyzer",
    "section": "Absorbance curves",
    "text": "Absorbance curves\nThe absorbance curve data, unlike the fat percentage data seen in the previous subsections, is composed of values obtainted discreetly by subjecting each of the meat samples to a spectrometric measuring device varying in the 850 - 1050nm wavelength range uniformly, with \\(100\\) equal design points across all meat samples. This results in \\(100 \\cdot 215 = 21500\\) observations in total. Figure 2 and Figure 3 provide a brief analysis on the distribution of the data; the plotted data is composed of the raw (i.e.: not smoothed) data. As previous reports have indicated the presence of an additional peak on the absorbance curves around the 930nm wavelength for meat samples with fat percentage superceding 20, the data are separated amongst these two groups.\n\n\nShow R code\ng03 = tecator_data |&gt;\n  ggplot(mapping = aes(y = absorbance,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = \"Absorbance\",\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng04 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(mean_absorbance = mean(absorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &gt; Fat\",\n                                   \"20% &lt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          mean_absorbance = mean(tecator_data$absorbance)) |&gt;\n  ggplot(mapping = aes(y = mean_absorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = \"Absorbance\",\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng03 + g04\n\n\n\n\n\n\n\n\nFigure 2: Left panel: spaghetti plot of the absorbance curves, separated by fat percentage. Right panel: mean absorbance curves, separated by fat percentage.\n\n\n\n\n\n\n\nShow R code\ng05 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(var_absorbance = var(absorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          var_absorbance = var(tecator_data$absorbance)) |&gt;\n  ggplot(mapping = aes(y = var_absorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(\"Absorbance\"^2),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng06 = melt(data = cor(tecator$absorp.fdata$data)) |&gt;\n  mutate(x = 850 + 200 * (Var1 - 1) / 99,\n         y = 850 + 200 * (Var2 - 1) / 99,\n         z = value,\n         Var1 = NULL,\n         Var2 = NULL,\n         value = NULL) |&gt;\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       fill = z)) +\n  geom_raster() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 size = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  size = .125),\n        legend.position = \"top\",\n        plot.margin = unit(c(.25, .75, .25, .75), \"cm\")) +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       fill = \"Correlation\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_fill_continuous(type = \"viridis\")\ng05 + g06\n\n\n\n\n\n\n\n\nFigure 3: Left panel: absorbance variance curves, separated by fat percentage. Right panel: correlogram of the absorbance curves.\n\n\n\n\n\nFrom a modelling standpoint, the values obtained at each design point may be considered covariates \\(x_{i,1},\\ldots,x_{i,100}\\), for \\(i \\in \\{1,\\ldots,215\\}\\), and as \\(100 = p &lt; N = 215\\), even a simple linear regression model is feasible. However, as evidenced in the Right panel of Figure 3, the data is highly correlated. Note that the minimum absolute correlation observed across the absorbance curves was \\(\\min_{i,j}\\{\\vert \\rho_{i,j} \\vert\\} \\approx 0.963\\). This implies that, were the data applied indiscriminately in a simpler linear regression model, it would be subject to a significant amount of multicollinearity. Alternatively, each absorbance curve may be considered a functional covariate \\(\\chi_{1},\\ldots,\\chi_{215}\\), which may be estimated by smoothing the discrete observed values, allowing for a more flexible form of high-dimensional modelling through functional regression. Adopting the purview of functional data analysis in this context also presents other advantages: functionals (i.e.: derivatives, integrals, etc.) of the data in question may likewise be explored. It is important to remark that the values of these functionals is dependent on the support of the data in question. The method ‘tf_derive()’, part of the ‘tf’ ‘R’ package, allows for the computation of the first-order derivative of the absorbance curves. Table 3 provides a view of the inclusion of the derivative column.\n\n\n\n\n\n\n\n\n\n\n\nfat\nabsorbance\ndabsorbance\n\n\n\n\n22.5\n1: (850,3);(852,3);(854,3); …\n1: (851,2e-04);(853,2e-04);(855,3e-04); …\n\n\n40.1\n2: (850,3);(852,3);(854,3); …\n2: (851,0.002);(853,0.002);(855,0.002); …\n\n\n8.4\n3: (850,3);(852,3);(854,3); …\n3: (851,9e-04);(853,8e-04);(855,9e-04); …\n\n\n5.9\n4: (850,3);(852,3);(854,3); …\n4: (851,9e-04);(853,8e-04);(855,9e-04); …\n\n\n25.5\n5: (850,3);(852,3);(854,3); …\n5: (851,9e-04);(853,9e-04);(855,9e-04); …\n\n\n\n\n\nTable 3: Comparisons of the ‘absorbance’ and ‘dabsorbance’ columns of the five first rows of the ‘tecator’ dataset. The column labelled as ‘dabsorbance’ is composed of ‘tfd’ objects, and represents the first order derivative of the ‘absorbance’ column, as computed via finite differences.\n\n\n\nAs similarly seen in previous reports, the derivative of the absorbance curves is significantly different for meat samples with fat percentage greater than 20%, as illustrated by Figure 4 and Figure 5. Unlike the usual absorbance curves, in this context the minimum absolute correlation observed across the derivatives of the absorbance curves is \\(\\min_{i,j}\\{\\vert \\tilde{\\rho}_{i,j} \\vert\\} \\approx 0\\). The \\(D\\) symbol is adopted to denote the application of the derivative. Note, in the Right panel of Figure 5, that the correlogram presents a steep decrease in correlation between the 930nm and 950nm wavelengths. This corresponds to a steep valley in the mean function for the data with fat percentage greater than 20, as seen in the Right panel of Figure 4.\n\n\nShow R code\ng07 = tecator_data |&gt;\n  ggplot(mapping = aes(y = dabsorbance,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(italic(\"D\"), \"Absorbance\")),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\"))\ng08 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(mean_dabsorbance = mean(dabsorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          mean_dabsorbance = mean(tecator_data$dabsorbance)) |&gt;\n  ggplot(mapping = aes(y = mean_dabsorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(italic(\"D\"), \"Absorbance\")),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\"))\ng07 + g08\n\n\n\n\n\n\n\n\nFigure 4: Left panel: spaghetti plot of the derivative of the absorbance curves, separated by fat percentage. Right panel: mean derivative of the absorbance curves, separated by fat percentage.\n\n\n\n\n\n\n\nShow R code\ng09 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(var_dabsorbance = var(dabsorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          var_dabsorbance = var(tecator_data$dabsorbance)) |&gt;\n  ggplot(mapping = aes(y = var_dabsorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(\"(\", italic(\"D\"), \"Absorbance)\"^2)),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\"))\ng10 = tecator_data$dabsorbance |&gt;\n  as.matrix() |&gt;\n  cor() |&gt;\n  melt() |&gt;\n  mutate(x = Var1,\n         y = Var2,\n         z = value,\n         Var1 = NULL,\n         Var2 = NULL,\n         value = NULL) |&gt;\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       fill = z)) +\n  geom_raster() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 size = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  size = .125),\n        legend.position = \"top\",\n        plot.margin = unit(c(.25, .75, .25, .75), \"cm\")) +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       fill = \"Correlation\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_fill_continuous(type = \"viridis\")\ng09 + g10\n\n\n\n\n\n\n\n\nFigure 5: Left panel: variance of the derivative of the absorbance curves, separated by fat percentage. Right panel: correlogram of the derivative of the absorbance curves.\n\n\n\n\n\nAn usual problem when dealing with multivariate data is that, in the absence of greater context, there is no singular approach to determining a ranking of observations. This is also true of functional data, hence there is no specific way to determine functional quantiles, nor a universal definition of a functional outlier. López-Pintado and Romo (2009) defines a form of functional depth, which allows for the computation of the functional median (as well as other quantiles), a work which was latter expanded in Sun and Genton (2011), wherein the procedure to construct a functional boxplot was delineated, allowing also for outlier detection. The computational implementation of functional boxplots is available in the ‘fda’ package for the R programming language, as part of the method fbplot(). Moreover, the computation of the functional depth developed in López-Pintado and Romo (2009) is available in the tf package through the tf_depth() method. Figure 6 displays functional boxplots of the absorbance curves, as well as their corresponding derivatives. Interesting insights may be gleaned with respect to manner in which functional depth detects outliers: in the first boxplot the observations \\(43\\), \\(44\\), \\(99\\), \\(140\\) and \\(185\\) are classified as outliers, whilst for the second boxplot, only the observation \\(140\\) is classified as an outlier. This is a sensible result, as it may be observed that the outlier observations in the former plot present significant vertical shift with respect to the median curves, and the first order derivative of a function is invariant with respect to any constant term (i.e., any constant vertical shift), hence the application of the derivative ‘standardizes’ the absorbance curves. Figure 7 enhances previous plots seen in Figure 2 and Figure 4 by highlighting outlier curves. As previously stated, the outlier curves for the absorbance curves possess significant vertical shift ‘upwards’, i.e., they are consistently greater than the mass of functional data, but also present a similar overall ‘shape’. By contrast, the sole outlier for the derivative of the absorbance curves presents more complex behaviour, initially being greater than the mass of functional data, and crossing over so that it is lesser. We note, from Figure 8, that the functional mean and median are very similar in the case of the derivative of the absorbance curves, whilst for the absorbance curves themselves there is indication of positive skewness, particularly for curves whose corresponding meat sample has more than 20% of fat.\n\n\nShow R code\npar(mfrow = c(2, 1))\ntecator_data$absorbance |&gt; as.matrix(byrow = FALSE) |&gt; t() |&gt;\n  fbplot(xlab = substitute(paste(\"Wavelength (in \",italic(\"nm\"),\")\")),\n         ylab = substitute(\"Absorbance\"),\n         family = \"LM Roman 10\",\n         axes = F,\n         ylim = c(1.5, 5.5),\n         color = \"darkgrey\",\n         barcol = \"lightgray\",\n         outliercol = \"red\",\n         x = tf_arg(tecator_data$absorbance),\n         xlim = c(850, 1050),\n         method = \"MBD\") |&gt; invisible()\naxis(side = 2, at = c(-100, 1, 2, 3, 4, 5, 6, 7, 100),\n     labels = c(\"a\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"b\"),\n     family = \"LM Roman 10\",\n     col.axis = \"cornsilk4\",\n     las = 2,\n     cex.axis = .75)\naxis(side = 1, at = c(-10, 850, 900, 950, 1000, 1050, 2000),\n     labels = c(\"a\", \"850\", \"900\", \"950\", \"1000\", \"1050\", \"b\"),\n     family = \"LM Roman 10\",\n     col.axis = \"cornsilk4\",\n     las = 1,\n     cex.axis = .75)\ntecator_data$dabsorbance |&gt; as.matrix(byrow = FALSE) |&gt; t() |&gt;\n  fbplot(xlab = substitute(paste(\"Wavelength (in \",italic(\"nm\"),\")\")),\n         ylab = substitute(paste(italic(\"D\"),\"Absorbance\")),\n         family = \"LM Roman 10\",\n         axes = F,\n         ylim = c(-0.02, 0.05),\n         color = \"darkgrey\",\n         barcol = \"lightgray\",\n         outliercol = \"red\",\n         x = tf_arg(tecator_data$dabsorbance),\n         xlim = c(850, 1050),\n         method = \"MBD\") |&gt; invisible()\naxis(side = 2, at = c(-100, -0.02, 0, 0.02, 0.04, 100),\n     labels = c(\"a\", \"-0.02\", \"0\", \"0.02\", \"0.04\", \"b\"),\n     family = \"LM Roman 10\",\n     col.axis = \"cornsilk4\",\n     las = 2,\n     cex.axis = .75)\naxis(side = 1, at = c(-10, 850, 900, 950, 1000, 1050, 2000),\n     labels = c(\"a\", \"850\", \"900\", \"950\", \"1000\", \"1050\", \"b\"),\n     family = \"LM Roman 10\",\n     col.axis = \"cornsilk4\",\n     las = 1,\n     cex.axis = .75)\n\n\n\n\n\n\n\n\nFigure 6: Upper panel: functional boxplots of the absorbance curves. Lower panel: functional boxplots of the derivative of the absorbance curves.\n\n\n\n\n\n\n\nShow R code\ng11 = g03\ng11$data = g11$data[ - c(43, 44, 140, 99, 185) , ]\ng11 = g11 + tecator_data[ c(43, 44, 99, 185) , ] |&gt; \n  geom_spaghetti(mapping = aes(y = absorbance),\n                 col = \"black\") + tecator_data[ 140 , ] |&gt; \n  geom_spaghetti(mapping = aes(y = absorbance),\n                 col = \"black\",\n                 linetype = \"dashed\")\ng12 = g07\ng12$data = g07$data[ -140 , ]\ng12 = g12 + tecator_data[ 140, ] |&gt; \n  geom_spaghetti(mapping = aes(y = dabsorbance),\n                 col = \"black\")\ng11 + g12\n\n\n\n\n\n\n\n\nFigure 7: Upper panel: spaghetti plot of the absorbance curves, separated by fat percentage, with outlier curves highlighted in black; observation \\(140\\) is likewise dashed. Lower panel: spaghetti plot of the derivative of the absorbance curves, separated by fat percentage, with outlier curves highlighted in black.\n\n\n\n\n\n\n\nShow R code\ng04 = g04 + tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(median_absorbance = median(absorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          median_absorbance = median(tecator_data$absorbance)) |&gt;\n  geom_spaghetti(inherit.aes = F,\n                 mapping = aes(y = median_absorbance,\n                               col = fat20),\n                 linetype = \"dashed\")\ng08 = g08 + tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(median_dabsorbance = median(dabsorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          median_dabsorbance = median(tecator_data$dabsorbance)) |&gt;\n  geom_spaghetti(inherit.aes = F,\n                 mapping = aes(y = median_dabsorbance,\n                               col = fat20),\n                 linetype = \"dashed\")\ng04 + g08\n\n\n\n\n\n\n\n\nFigure 8: Upper panel: mean and median absorbance curves, separated by fat percentage, represented respectively by solid and dashed curves. Lower panel: mean and median derivative of the absorbance curves, separated by fat percentage, represented respectively by solid and dashed curves.\n\n\n\n\n\nNote that Figure 2, Figure 3 and Figure 4 display the raw absorbance curves (and corresponding derivatives), that is, we employ no smoothing techniques in those displays. This is feasible for this particular data set due to the fact that the absorbance curves (and corresponding derivatives) are contaminated by very little noise. The method tfb(), of the ‘tidyfun’ allows us to represent variables originally stored as tfd objects, ideal for raw functional data, to variables stored as tfb functional data, which is ideal for representing functional data as a linear combination of a finite number of basis functions; this is done by an interface with methods on the ‘mgcv’ R package. In particular, we will smooth the usual absorbance curves utilizing \\(K = 15\\) B-spline basis, whilst the derivatives of the absorbance curves will be smoothed utilizing \\(K = 30\\) B-spline basis. The results are presented in Figures Figure 9 and Figure 10. Whilst certain distinctions are visible between the raw and smoothed data, it is apparent that the smoothed data provides a reasonable approximation to the sampled curves. Moreover, we note that the tfb() method itself provides a diagnostic with respect to the amount of variability preserved in the basis representation (which is ommited in the present study, but is exhibited by setting the argument verbose = TRUE): for both generated tfb objects the basis representations preserve a minimum of \\(99.8\\%\\) variability. We may now proceed to studying the functional regression problem.\n\n\nShow R code\ntecator_data = tecator_data |&gt; mutate(absorbance_basis = tfb(absorbance,\n                                                             basis = \"spline\",\n                                                             bs = \"bs\",\n                                                             k = 15,\n                                                             verbose = FALSE),\n                                      dabsorbance_basis = tfb(dabsorbance,\n                                                              basis = \"spline\",\n                                                              bs = \"bs\",\n                                                              k = 30,\n                                                              verbose = FALSE))\ng13 = tecator_data |&gt;\n  ggplot(mapping = aes(y = absorbance_basis,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(\"Smoothed Absorbance\"),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng03 + g13\n\n\n\n\n\n\n\n\nFigure 9: Left panel: raw absorbance curves. Right panel: smoothed absorbance curves.\n\n\n\n\n\n\n\nShow R code\ng14 = tecator_data |&gt;\n  ggplot(mapping = aes(y = dabsorbance_basis,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(\"Smoothed \",italic(\"D\"),\"Absorbance\")),,\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\"))\ng07 + g14\n\n\n\n\n\n\n\n\nFigure 10: Left panel: raw derivative of the absorbance curves. Right panel: smoothed derivative of the absorbance curves.\n\n\n\n\n\nUltimately, as the observed functions are sufficiently regular, the functional regression models applied in the following section were constructed utilizing the raw absorbance curves as predictors, and this exploration was mostly illustrative."
  },
  {
    "objectID": "vignettes/vignette0001.html#model-i",
    "href": "vignettes/vignette0001.html#model-i",
    "title": "Tecator Infratec Analyzer",
    "section": "Model I",
    "text": "Model I\nNoticing."
  },
  {
    "objectID": "vignettes/vignette0001.html#model-ii",
    "href": "vignettes/vignette0001.html#model-ii",
    "title": "Tecator Infratec Analyzer",
    "section": "Model II",
    "text": "Model II\n\n\nCode\ntecator_data$dabsorbance_matrix = tecator_data$dabsorbance |&gt; as.matrix()\ntecator_data = tecator_data |&gt; mutate(fat = fat / 100)\nfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                               bs = \"tp\",\n                               k = 5,\n                               m = 3),\n           fitter = \"gam\",\n           family = betar(link = \"logit\"),\n           tensortype = \"te\",\n           data = tecator_data,\n           weights = tecator_data$train,\n           method = \"REML\",\n           scale = 0.06361)\n\ntecator_data = tecator_data |&gt;\n  mutate(fat_fitted = fit$fitted.values)\n\ng17 = tecator_data |&gt;\n  mutate(train = factor(x = ifelse(test = tecator_data$train == 1, \"Train\", \"Test\"),\n                        levels = c(\"Train\", \"Test\"))) |&gt;\n  ggplot(mapping = aes(x = fat_fitted,\n                       y = fat,\n                       color = train)) +\n  geom_point() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = \"Fitted\",\n       y = \"True\",\n       col = \"\") +\n  scale_color_manual(values = c(\"blue\", \"red\")) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"0\", \"1/2\", \"1\"),\n                     limits = c(0, 1)) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"0\", \"1/2\", \"1\"),\n                     limits = c(0, 1)) +\n  geom_abline(slope = 1,\n              intercept = 0,\n              linetype = \"dashed\")\n  \ng17\n\n\n\n\n\n\n\n\n\nResiduals\n\n\nCode\nlibrary(\"gamlss\")\n#&gt; Carregando pacotes exigidos: gamlss.data\n#&gt; \n#&gt; Anexando pacote: 'gamlss.data'\n#&gt; O seguinte objeto é mascarado por 'package:datasets':\n#&gt; \n#&gt;     sleep\n#&gt; Carregando pacotes exigidos: gamlss.dist\n#&gt; Carregando pacotes exigidos: parallel\n#&gt;  **********   GAMLSS Version 5.4-22  **********\n#&gt; For more on GAMLSS look at https://www.gamlss.com/\n#&gt; Type gamlssNews() to see new features/changes/bug fixes.\n#&gt; \n#&gt; Anexando pacote: 'gamlss'\n#&gt; O seguinte objeto é mascarado por 'package:refund':\n#&gt; \n#&gt;     re\n#&gt; O seguinte objeto é mascarado por 'package:mgcv':\n#&gt; \n#&gt;     lp\ncrack = data.frame(ww = tecator_data$fat[ tecator_data$train == 1 ],\n                   zz = fit$fitted.values[ tecator_data$train == 1 ])\n\nreg = gamlss(formula = ww ~ zz,\n             family = BE(mu.link = \"identity\",\n                         sigma.link = \"identity\"),\n             data = crack)\n#&gt; GAMLSS-RS iteration 1: Global Deviance = -257.1634 \n#&gt; GAMLSS-RS iteration 2: Global Deviance = -452.3448 \n#&gt; GAMLSS-RS iteration 3: Global Deviance = -535.9769 \n#&gt; GAMLSS-RS iteration 4: Global Deviance = -537.3277 \n#&gt; GAMLSS-RS iteration 5: Global Deviance = -537.3282\nplot(reg)\n\n\n\n\n\n\n\n\n#&gt; ******************************************************************\n#&gt;        Summary of the Quantile Residuals\n#&gt;                            mean   =  0.0306589 \n#&gt;                        variance   =  1.008963 \n#&gt;                coef. of skewness  =  -0.4881235 \n#&gt;                coef. of kurtosis  =  3.368245 \n#&gt; Filliben correlation coefficient  =  0.9901213 \n#&gt; ******************************************************************\n\nfit_total = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                                    bs = \"tp\",\n                                    k = 5,\n                                    m = 3),\n                 fitter = \"gam\",\n                 family = betar(link = \"logit\"),\n                 tensortype = \"te\",\n                 data = tecator_data,\n                 method = \"REML\",\n                 scale = 0.112152)\n\nplot(x = fit_total$fitted.values,\n     y = tecator_data$fat)\n\n\n\n\n\n\n\n\nCode\n\nheroina = data.frame(ww = tecator_data$fat,\n                     zz = fit_total$fitted.values)\n\nreg = gamlss(formula = ww ~ zz,\n             family = BE(mu.link = \"identity\",\n                         sigma.link = \"identity\"),\n             data = heroina)\n#&gt; GAMLSS-RS iteration 1: Global Deviance = -511.795 \n#&gt; GAMLSS-RS iteration 2: Global Deviance = -888.5879 \n#&gt; GAMLSS-RS iteration 3: Global Deviance = -1045.234 \n#&gt; GAMLSS-RS iteration 4: Global Deviance = -1047.916 \n#&gt; GAMLSS-RS iteration 5: Global Deviance = -1047.917 \n#&gt; GAMLSS-RS iteration 6: Global Deviance = -1047.917\nplot(reg)\n\n\n\n\n\n\n\n\n#&gt; ******************************************************************\n#&gt;        Summary of the Quantile Residuals\n#&gt;                            mean   =  0.04270085 \n#&gt;                        variance   =  1.004243 \n#&gt;                coef. of skewness  =  -0.7922292 \n#&gt;                coef. of kurtosis  =  4.073507 \n#&gt; Filliben correlation coefficient  =  0.9811175 \n#&gt; ******************************************************************\n\nNoticing"
  },
  {
    "objectID": "vignettes/vignette0002.html#data",
    "href": "vignettes/vignette0002.html#data",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "Data",
    "text": "Data\nFor this particular study, we consider two distinct data sets, the Motorcycle data set and the Canadian weather data set: the former is frequently studied in the overall spline smoothing context, whilst the latter is appropriate for the more specific context of Functional Data Analysis. We will also present a brief simulation study.\n\n\nShow R code\nlibrary(\"tidyverse\")  ## R package for tidy data manipulation and visualization\nlibrary(\"tf\")         ## R package for tidy functional data manipulation\nlibrary(\"tidyfun\")    ## R package for tidy functional data visualization\nlibrary(\"extrafont\")\nlibrary(\"fda\")\nlibrary(\"MASS\")\nlibrary(\"tf\")         ## R package for tidy functional data manipulation\n\n\n\nThe Motorcycle data set\nThe Motorcycle data set (seen in Silverman (1985), and available in the R programming language in the package MASS), is composed of data recorded on a Tecator Infratec Food and Feed Analyzer tool, working in the wavelength range 850 - 1050nm by the Near Infrared Transmission (NIT) principle. Each sample (\\(N = 240\\)) contains finely chopped pure meat with different moisture, fat and protein contents. For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is \\(-\\log_{10}\\) of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry (click here for further details).\n\n\nShow R code\nmotorcycle_data = data.frame(id = 1)\nmotorcycle_data$curve = tfd(data = mcycle$accel,\n                            arg = jitter(mcycle$times, amount = 0.1))\nmotorcycle_data$smooth_curve = motorcycle_data$curve |&gt; \n  tfb(basis = \"spline\",\n      verbose = FALSE,\n      k = 15,\n      bs = \"cr\")\ng03 = motorcycle_data |&gt;\n  ggplot(mapping = aes(y = smooth_curve)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = \"Absorbance\",\n       col = \"\")\ng03\n\n\n\n\n\n\n\n\n\n\n\nThe Canadian weather data set\nThe Canadian weather data set\n\n\nSimulated data\n\\[\n  y_i(t_{i,j}) = \\cos(t_{i,j}) + \\sin(2 t_{i,j}) + \\varepsilon_{i}(t_{i,j})\n\\] and \\[\n  y_i(t_{i,j}) = \\begin{pmatrix}\n    -2 \\\\\n    0 \\\\\n    3/2 \\\\\n    3/2 \\\\\n    0 \\\\\n    -1 \\\\\n    -1/2 \\\\\n    -1 \\\\\n    0 \\\\\n    0\n  \\end{pmatrix}\\textbf{B}(t_{i,j}) + \\varepsilon_i(t_{i,j})\n\\]"
  },
  {
    "objectID": "vignettes/vignette0002.html#setup",
    "href": "vignettes/vignette0002.html#setup",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "Setup",
    "text": "Setup\nThis vignette is primarily concerned with presenting an approach to sparse Functional Data representation utilizing the Automatic Relevance Determination (ARD) framework, itself only a topic in the wider Sparse Bayesian Learning (SBL) context. More precisely, our aim herein is to replicate some of the studies in Sousa, Souza, and Dias (2024) and Cruz, Souza, and Sousa (2024) (the former moreso than the latter, as we do not account for any correlation structure in the curves). The goal of these previous studies was to provide a novel Bayesian adaptive procedure to select the bases for functional data representation, the latter also extending the results of the former by including a correlation structure for the functional data, and delineating an estimation procedure utilizing the Variational Bayes (VB) approach.\n\\[\n  \\beta \\sim \\text{Normal}(0_K,\\textbf{A}).\n\\] where \\(\\textbf{A} = \\text{diag}(\\alpha_i)\\). For further detailing and intuition on the inner workings of the ARD approach, we refer the reader to Tipping (2001)\n\\[\n  \\begin{aligned}\n    \\Sigma & = (\\textbf{A} + \\beta \\Phi^\\top \\Phi)^{-1} \\\\\n    & = \\textbf{A}^{-1} - \\textbf{A}^{-1}\\Phi^\\top(\\mathbb{I}_N + \\beta \\Phi \\textbf{A}^{-1} \\Phi^\\top )^{-1}\\Phi \\textbf{A}^{-1}\n  \\end{aligned}\n\\]"
  },
  {
    "objectID": "vignettes/vignette0002.html#fixed-point-updates",
    "href": "vignettes/vignette0002.html#fixed-point-updates",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "Fixed Point Updates",
    "text": "Fixed Point Updates\nA"
  },
  {
    "objectID": "vignettes/vignette0002.html#expectation-maximization-approach",
    "href": "vignettes/vignette0002.html#expectation-maximization-approach",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "Expectation Maximization Approach",
    "text": "Expectation Maximization Approach\nB"
  },
  {
    "objectID": "vignettes/vignette0001.html#functional-generalized-linear-model",
    "href": "vignettes/vignette0001.html#functional-generalized-linear-model",
    "title": "Tecator Infratec Analyzer",
    "section": "Functional Generalized Linear Model",
    "text": "Functional Generalized Linear Model\nNoticing."
  },
  {
    "objectID": "vignettes/vignette0001.html#functional-generalized-additive-model",
    "href": "vignettes/vignette0001.html#functional-generalized-additive-model",
    "title": "Tecator Infratec Analyzer",
    "section": "Functional Generalized Additive Model",
    "text": "Functional Generalized Additive Model\nBefore applying it, we will present some aspects of the FGAM model, as seen in McLean et al. (2014). First, we rewrite the functional additive term in the form of a tensor product expansion of two marginal cubic spline functions (other basis expansions are also available), of orders \\(K_1\\) and \\(K_2\\), as follows: \\[\n  F\\{t, D \\chi_i(t)\\} = \\sum^{K_1}_{j_1 = 1}\\sum^{K_2}_{j_2 = 1}\\theta_{j_1,j_2} \\textbf{B}_{1,j_1}(t) \\textbf{B}_{2,j_2}(D \\chi_i (t)).\n\\] Hence, we rewrite the inverse of the link function applied to the mean \\(\\mu_i\\) as \\[\n  g^{-1}(\\mu_i) = \\beta_0 + \\!\\!\\int^{1050}_{850} F\\{s,D \\chi_i(s)\\} \\; \\text{d}s = \\beta_0 + \\sum^{K_1}_{j_1 = 1}\\sum^{K_2}_{j_2 = 1} \\theta_{j_1,j_2}Z_{j_1,j_2}(i),\n\\] where \\[\n  Z_{j_1,j_2}(i) = \\!\\!\\int^{1050}_{850}  \\textbf{B}_{1,j_1}(s) \\textbf{B}_{2,j_2}(D \\chi_i (s)) \\; \\text{d}s.\n\\] That is, we have reduced the infinite-dimensional problem of estimating \\(F\\{\\cdot,\\cdot\\}\\) into a finite-dimensional estimating problem where we seek to determine the parameters \\(\\beta_0\\) and \\(\\mathbf{\\theta}\\), for example, via restricted maximum likelihood methods. There are a panoply of settings to be tuned when estimating an FGAM, such as:\n\nThe number of components \\(K_1\\) and \\(K_2\\) on the functional additive term;\nThe link function \\(g(\\cdot)\\) to be adopted;\nThe family adopted in the fitting procedure;\n\namongst others. The third setting was alluded to previously when presenting the analysis of the Fat percentage data, wherein we observed that a distribution family of bounded support is ideal for the response variable, hence we will adopt the Beta regression framework. With respect to the link function, we determined, via residual analysis, that the probit link function results in the best fit (when comapared to the cloglog, cauchit and logit link functions). For the number of components on the functional additive term, we defined \\(K_1 = K_2 = K\\), and visually examined the predictive behavior of the models for \\(K \\in \\{1,2,\\ldots,10\\}\\). Figure 13 exhibits fitted versus true values, separated by training data and test data, for \\(K \\in \\{5,6,7\\}\\). We note that the model with \\(K = 6\\) presents less variability than the model with \\(K = 5\\), however the distinction between the model with \\(K = 6\\) and \\(K = 7\\) is less apparent. Likewise, we find that the change in estimate variability is similar through \\(K &gt; 6\\). Therefore, we likewise determined the ideal number of components via residuals analysis as \\(K = 6\\).\n\n\n\n\n\n\nOn estimating the deviation parameter\n\n\n\nDue to an error, the fgam() function does not estimate the deviation parameter \\(\\phi\\). Therefore, we have coupled the fgam() method from the refund R package and the gamlss() method from the gamlss R package in order to estimate it. We first estimate the FGAM model, with the fgam() method, utilizing a fixed deviation parameter \\(\\phi_0\\) (which we have chosen as \\(\\phi_0 = 1\\)). We subsequently estimate another Beta regression model using the gamlss() method, with fixed mean values \\(\\hat{\\mathbf{\\mu}}\\) obtained from the fitted FGAM model, according to Equation 2, and obtain the value of the scale parameter estimate \\(\\hat{\\sigma}^2\\). Note that the parametrization of the variance in the Beta regression model differs between the mgcv implementation (and consequently the fgam() method) and the gamlss implementation. mgcv parametrizes the variance of \\(Y_i\\) as \\[\n  \\mathbb{V}\\text{ar}[Y_i \\vert \\mu_i] = \\frac{\\mu_i(1 - \\mu_i)}{1 + \\phi},\n\\] conversely, gamlss parametrizes the variance of \\(Y_i\\) as \\[\n  \\mathbb{V}\\text{ar}[Y_i \\vert \\mu_i] = \\sigma^2 \\mu_i(1 - \\mu_i).\n\\] Consequently, we estimate the deviance parameter, based in the scale parameter estimate obtained by gamlss, as \\[\n  \\hat{\\phi} = \\frac{1 - \\hat{\\sigma}^2}{\\hat{\\sigma}^2}.\n\\tag{3}\\] We thereafter reestimate the FGAM model using a fixed deviance estimate obtained via Equation 3, repeating the procedure until a maximum number of iterations is reached (which we have set to 25). An additional benefit of this coupling is that it allows us to utilize the residual analysis tools available from the gamlss package to better diagnose our model’s fit.\n\n\n\n\nShow R code\ntheta_initial = 1\nmax_iterations = 25\ntheta_underfit = numeric(max_iterations)\ntheta_overfit = numeric(max_iterations)\ntheta_ideal = numeric(max_iterations)\ntheta_underfit[1] = theta_initial\ntheta_overfit[1] = theta_initial\ntheta_ideal[1] = theta_initial\n\niteration = 1\nwhile(iteration &lt; max_iterations)\n{\n  fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                                         basistype = \"te\",\n                                         bs = \"cr\",\n                                         k = c(5, 5)),\n                      fitter = \"gam\",\n                      family = betar(link = \"probit\",\n                                     theta = theta_underfit[ iteration ]),\n                      tensortype = \"te\",\n                      data = tecator_data,\n                      weights = tecator_data$train,\n                      method = \"REML\")\n  fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                                        basistype = \"te\",\n                                        bs = \"cr\",\n                                        k = c(7, 7)),\n                     fitter = \"gam\",\n                     family = betar(link = \"probit\",\n                                    theta = theta_overfit[ iteration ]),\n                     tensortype = \"te\",\n                     data = tecator_data,\n                     weights = tecator_data$train,\n                     method = \"REML\")\n  fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                                      basistype = \"te\",\n                                      bs = \"cr\",\n                                      k = c(6, 6)),\n                   fitter = \"gam\",\n                   family = betar(link = \"probit\",\n                                  theta = theta_ideal[ iteration ]),\n                   tensortype = \"te\",\n                   data = tecator_data,\n                   weights = tecator_data$train,\n                   method = \"REML\")\n  tecator_data = tecator_data |&gt;\n  mutate(fat_under = fit_underfit$fitted.values,\n         fat_over = fit_overfit$fitted.values,\n         fat_ideal = fit_ideal$fitted.values)\n  temporary_data = tecator_data |&gt; subset(train == 1)\n  diag_underfit =\n    gamlss(formula = fat ~-1,\n           family = BE(mu.link = \"identity\",\n                       sigma.link = \"identity\"),\n           mu.start = temporary_data$fat_under,\n           mu.fix = T,\n           data = temporary_data,\n           trace = F)\n  diag_overfit =\n    gamlss(formula = fat ~-1,\n           family = BE(mu.link = \"identity\",\n                       sigma.link = \"identity\"),\n           mu.start = temporary_data$fat_over,\n           mu.fix = T,\n           data = temporary_data,\n           trace = F)\n  diag_ideal =\n    gamlss(formula = fat ~-1,\n           family = BE(mu.link = \"identity\",\n                       sigma.link = \"identity\"),\n           mu.start = temporary_data$fat_ideal,\n           mu.fix = T,\n           data = temporary_data,\n           trace = F)\n  theta_underfit[ iteration + 1 ] = (1 - diag_underfit$sigma.coefficients ^ 2) / (diag_underfit$sigma.coefficients ^ 2)\n  theta_overfit[ iteration + 1 ] = (1 - diag_overfit$sigma.coefficients ^ 2) / (diag_overfit$sigma.coefficients ^ 2)\n  theta_ideal[ iteration + 1 ] = (1 - diag_ideal$sigma.coefficients ^ 2) / (diag_ideal$sigma.coefficients ^ 2)\n  iteration = iteration + 1\n}\n\ng17 = tecator_data |&gt; select(fat_under, fat_over, fat_ideal, fat, train) |&gt;\n  melt(id.vars = c(\"fat\",\n                   \"train\")) |&gt;\n  mutate(fitted = value,\n         model = sapply(X = as.character(variable),\n                        switch,\n                        \"fat_under\" = \"K = 5\",\n                        \"fat_over\" = \"K = 7\",\n                        \"fat_ideal\" = \"K = 6\") |&gt;\n           factor(levels = c(\"K = 5\",\n                             \"K = 6\",\n                             \"K = 7\")),\n         train = factor(x = ifelse(test = train == 1, \"Train\", \"Test\"),\n                        levels = c(\"Train\", \"Test\"))) |&gt;\n  mutate(value = NULL,\n         variable = NULL) |&gt;\n  ggplot(mapping = aes(x = fitted,\n                       y = fat,\n                       color = train)) +\n  geom_point() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = \"Fitted\",\n       y = \"True\",\n       col = \"\") +\n  scale_color_manual(values = c(\"blue\", \"red\")) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"0\", \"1/2\", \"1\"),\n                     limits = c(0, 1)) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"0\", \"1/2\", \"1\"),\n                     limits = c(0, 1)) +\n  geom_abline(slope = 1,\n              intercept = 0,\n              linetype = \"dashed\") +\n  facet_wrap(vars(model))\ng17\n\n\n\n\n\n\n\n\nFigure 13: Fitted values versus true values of Fat percentage, separated between training and test data sets, for \\(K \\in \\{5,6,7\\}\\).\n\n\n\n\n\nFigure 14 depicts some residual analysis plots output by the appraise() method from the gratia package in R. The QQ plot presents deviations at the extremes, and the linear predictor versus deviance residuals plot exhibits evidence of non-homoscedastic behavior, with a higher variation in residuals with lower corresponding linear predictors values. Nevertheless, we conclude the model exhibits a sufficiently good fit, when estimated solely on the training data.\n\n\n\n\n\n\n\n\nFigure 14: Residual analysis plot generated via the appraise() method for the training data set.\n\n\n\n\n\nFigure 15 depicts the residual analysis plots output by the appraise() method for the model constructed utilizing the full data set, with \\(K = 6\\). The residuals present similar behavior to that which was noted in Figure 15, and as such we conclude again that the fit is sufficiently good.\n\n\n\n\n\n\n\n\nFigure 15: Residual analysis plot generated via the appraise() method for the complete data set.\n\n\n\n\n\n\n\nShow R code\nse = smooth_estimates(fit_total, dist = .05) \ndraw(se) + \n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"right\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(italic(\"D\"),\"Absorbance\")),,\n       col = \"\",\n       subtitle = \"\",\n       tag = \"\",\n       caption = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"850\", \"950\", \"1050\"),\n                     limits = c(0.01169591, 1.004762)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  ggtitle(substitute(paste(\"te(\",italic(\"D\"),\"Absorbance,\", italic(t), \")\"))) +\n  scale_fill_continuous(type = \"viridis\",\n                        guide = \"colourbar\") +\n  guides(fill = guide_colourbar(title = substitute(paste(\"Partial effect\"))))\n#&gt; Scale for fill is already present.\n#&gt; Adding another scale for fill, which will replace the existing scale."
  },
  {
    "objectID": "vignettes/vignette0001.html#footnotes",
    "href": "vignettes/vignette0001.html#footnotes",
    "title": "Tecator Infratec Analyzer",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIt is apparent from the acronyms GFLM and FGAM that the position of the terms ‘Functional’ and ‘Generalized’ are interchangeable when denoting these models. Indeed, some references (see for example Eckardt, Mateu, and Greven (2024)) exchange the order of these terms in the latter acronym.↩︎"
  },
  {
    "objectID": "vignettes/vignette0001.html#generalized-functional-linear-model",
    "href": "vignettes/vignette0001.html#generalized-functional-linear-model",
    "title": "Tecator Infratec Analyzer",
    "section": "Generalized Functional Linear Model",
    "text": "Generalized Functional Linear Model\n\n\nShow R code\ntecator_data %&lt;&gt;% mutate(dabsorbance_matrix = dabsorbance |&gt; as.matrix(),\n                         fat = fat / 100)\ntemporary_data = tecator_data |&gt;\n  subset(train = 1)\nfit_ideal = temporary_data %&gt;% pfr(data = .,\n                                   formula = fat ~ lf(X = dabsorbance_matrix,\n                                                      argvals = attr(dabsorbance_matrix, \"arg\"),\n                                                      bs = \"cr\",\n                                                      k = 30),\n                                   method = \"REML\",\n                                   family = betar(link = \"probit\"),\n                                   fitter = \"gam\")\nappraise(fit_ideal) & theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"right\",\n        panel.background = element_blank())\n\n\n\n\n\n\n\n\nFigure 12: Fitted values versus true values of Fat percentage, separated between training and test data sets, for \\(K \\in \\{5,6,7\\}\\)."
  },
  {
    "objectID": "index.html#random-quote",
    "href": "index.html#random-quote",
    "title": "Felipe Ferreira",
    "section": "Random quote",
    "text": "Random quote"
  },
  {
    "objectID": "solutions.html",
    "href": "solutions.html",
    "title": "Exercise Solutions",
    "section": "",
    "text": "This page consists of exercise solutions of books I have been working through.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntrodução à Inferência Estatística\n\n\nHeleno Bolfarine and Mônica Carneiro Sandoval\n\n\n\n\n\n\n\n\nJul 1, 2025\n\n\nFelipe Toledo Ferreira\n\n\n\n\n\n\n\n\n\n\n\n\nPattern Recognition and Machine Learning\n\n\nChristopher M. Bishop\n\n\n\n\n\n\n\n\nJul 1, 2025\n\n\nFelipe Toledo Ferreira\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "solutions/introducaoInferencia.html",
    "href": "solutions/introducaoInferencia.html",
    "title": "Introdução à Inferência Estatística",
    "section": "",
    "text": "&lt;object data=‘Barlowe’s Guide to Extraterrestrials.pdf’ type=“application/pdf” width=100% height=950px&gt;"
  },
  {
    "objectID": "index.html#i-am",
    "href": "index.html#i-am",
    "title": "Felipe Ferreira",
    "section": "I am…",
    "text": "I am…\n…a Statistician, having received my bachelor’s degree in Statistics (2022) from the Federal University of Juiz de Fora and my Master’s degree in Statistics (2024) from the University of São Paulo. My main research interests are Nonparametric Statistics, Functional Data Analysis and Approximate Inference.\nCheck out my undergraduate thesis (in Portuguese) or my Master’s thesis."
  },
  {
    "objectID": "vignettes/vignette0002.html",
    "href": "vignettes/vignette0002.html",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "",
    "text": "Last updated in 2025/07/01."
  },
  {
    "objectID": "vignettes/vignette0001.html#ultimately-as-the-observed-functions-are-sufficiently-regular-the-functional-regression-models-applied-in-the-following-section-were-constructed-utilizing-the-raw-absorbance-curves-as-predictors.",
    "href": "vignettes/vignette0001.html#ultimately-as-the-observed-functions-are-sufficiently-regular-the-functional-regression-models-applied-in-the-following-section-were-constructed-utilizing-the-raw-absorbance-curves-as-predictors.",
    "title": "Tecator Infratec Analyzer",
    "section": "Ultimately, as the observed functions are sufficiently regular, the functional regression models applied in the following section were constructed utilizing the raw absorbance curves as predictors.",
    "text": "Ultimately, as the observed functions are sufficiently regular, the functional regression models applied in the following section were constructed utilizing the raw absorbance curves as predictors."
  },
  {
    "objectID": "vignettes/tecatorRegression.html",
    "href": "vignettes/tecatorRegression.html",
    "title": "Tecator Infratec Analyzer",
    "section": "",
    "text": "Last updated 2025/07/01."
  },
  {
    "objectID": "vignettes/tecatorRegression.html#data",
    "href": "vignettes/tecatorRegression.html#data",
    "title": "Tecator Infratec Analyzer",
    "section": "Data",
    "text": "Data\nThe Tecator Infratec Feed Analyzer data set (seen in Ferraty and Vieu (2006)), is composed of data recorded on a Tecator Infratec Food and Feed Analyzer tool, working in the wavelength range 850 - 1050nm by the Near Infrared Transmission (NIT) principle. Each sample (\\(N = 215\\)) contains finely chopped pure meat with different moisture, fat and protein contents. For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is \\(-\\log_{10}\\) of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry (click here for further details)."
  },
  {
    "objectID": "vignettes/tecatorRegression.html#setup",
    "href": "vignettes/tecatorRegression.html#setup",
    "title": "Tecator Infratec Analyzer",
    "section": "Setup",
    "text": "Setup\nThis vignette is primarily concerned with presenting a set of methods to perform functional regression, motivated by the Tecator Infratec Feed Analyzer dataset, and with computational tools provided by the R programming language. First, a number of packages must be downloaded and subsequently called. In particular, the ‘tidyfun’ package must be downloaded remotely, as it is not yet available on CRAN. The following chunk performs this step:\n\n\nShow R code\nlibrary(\"fda.usc\")    ## R package containing the 'tecator' dataset\nlibrary(\"tidyverse\")  ## R package for tidy data manipulation and visualization\nlibrary(\"tf\")         ## R package for tidy functional data manipulation\nlibrary(\"tidyfun\")    ## R package for tidy functional data visualization\nlibrary(\"extrafont\")\nlibrary(\"moments\")    ## R package for computing sample moments\nlibrary(\"corrplot\")   ## R package for visualizing correlograms\nlibrary(\"reshape2\")   ## R package for data manipulation\nlibrary(\"refund\")     ## R package for functional regression\nlibrary(\"forcats\")    ## R package for data manipulation, particularly factors\nlibrary(\"gratia\")     ## R package for visualizing additive models\nlibrary(\"gamlss\")     ## R package for generalized additive models for location, scale and shape\nlibrary(\"patchwork\")  ## R package for plot composition\nlibrary(\"magrittr\")   ## R package for pipes\n\n\nThe ‘tecator’ dataset is sourced from the fda.usc package (see Febrero-Bande and Oviedo de la Fuente (2012)). Noticeably, it is stored therein as a list object - this vignette converts this dataset to a data.frame object, via the tools made available on the tf package, which seeks to provide classes and methods for “Tidy Functional Data”, inspired by the greater existing tidyverse packages for data manipulation and visualization. The following chunk performs this conversion:\n\n\nShow R code\n## Importing the 'tecator' dataset\ndata(tecator)\n## Converting 'tecator' to df (data frame)\ntecator_data = data.frame(fat = tecator$y$Fat,\n                          water = tecator$y$Water,\n                          protein = tecator$y$Protein)\n## Adding the functional data, in tfd structure, to the df object\ntecator_data %&lt;&gt;%\n  mutate(absorbance = tfd(data = tecator$absorp.fdata$data,\n                          arg = tecator$absorp.fdata$argvals))\n## Separating data by fat percentage\ntecator_data %&lt;&gt;%\n  mutate(fat20 = factor(ifelse(test = (fat &gt;= 20),\n                               yes = \"20% &gt; Fat\",\n                               no = \"20% &lt; Fat\"),\n                        levels = c(\"20% &gt; Fat\",\n                                   \"20% &lt; Fat\")))\n\n\nTable 1 illustrates how functional data is stored within a data.frame object through the implementation of the tf package - in particular, the absorbance column is stored as a tfd object, such that, to every row within the resulting data frame, there exists a corresponding functional observation.\n\n\n\n\n\n\nfat\nwater\nprotein\nabsorbance\nfat20\n\n\n\n\n22.5\n60.5\n16.7\n1: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n40.1\n46.0\n13.5\n2: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n8.4\n71.0\n20.5\n3: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n5.9\n72.8\n20.7\n4: (850,3);(852,3);(854,3); …\n20% &lt; Fat\n\n\n25.5\n58.3\n15.5\n5: (850,3);(852,3);(854,3); …\n20% &gt; Fat\n\n\n\n\n\nTable 1: Snapshot of the five first rows of the ‘tecator’ dataset. Note that the column labelled as ‘absorbance’ is composed of ‘tfd’ objects, from the ‘tidyfun’ R package."
  },
  {
    "objectID": "vignettes/tecatorRegression.html#fat-percentage",
    "href": "vignettes/tecatorRegression.html#fat-percentage",
    "title": "Tecator Infratec Analyzer",
    "section": "Fat percentage",
    "text": "Fat percentage\nExpressly, the main goal of this application is to construct a predictive model for the fat percentage of the meat samples, utilizing corresponding absorbance curves as model covariates. For that purpose, first a simple exploratory analysis of the data must be performed, to allow for model elicitation. Figure 1 and Table 2 seen below provide a brief view of the distribution of the fat percentage. Hereafter, the observed values of fat percentage in the dataset may also be referred to as \\(y_1,\\ldots,y_{215}\\), which is assumed to be sampled from a set of independent random variables \\(Y_1,\\ldots,Y_{215}\\) with unknown distribution.\n\n\nShow R code\ng01 = tecator$y |&gt; ggplot(mapping = aes(x = Fat)) +\n  geom_density(fill = \"cyan\",\n               alpha = .25,\n               linetype = \"dashed\") +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125)) +\n  labs(x = \"Fat %\",\n       y = \"Density\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.05),\n                     labels = c(\"0\", substitute(\"1/100\"), substitute(\"2/50\"),\n                                substitute(\"3/100\"), substitute(\"1/25\"),\n                                substitute(\"1/20\")),\n                     limits = c(0, 0.05)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(5, 15, 25, 35, 45),\n                     labels = c(\"5\", \"15\", \"25\", \"35\", \"45\"),\n                     limits = c(0.9, 49.1))\ng02 = tecator$y |&gt; ggplot(mapping = aes(x = Fat)) +\n  geom_boxplot(fill = \"magenta\",\n               alpha = .5) +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.minor.ticks.y.left = element_blank()) +\n  labs(x = \"Fat %\",\n       y = \"Density\")\ng01 + g02\n\n\n\n\n\n\n\n\nFigure 1: Left panel: sample estimated density of the fat percentage. Right panel: sample boxplot of the fat percentage.\n\n\n\n\n\n\n\n\n\n\n\nMin.\n1st Qu.\nMedian\nMean\n3rd Qu.\nMax.\n\n\n\n\n0.9\n7.3\n14\n18.142\n28\n49.1\n\n\n\n\n\nTable 2: Sample summary statistics of the fat percentage.\n\n\n\nAdditionally, the sample skewness and kurtosis were computed as \\(\\widehat{\\text{Skew}}(Y) \\approx 0.802\\) and \\(\\widehat{\\text{Kurt}}(Y) \\approx 2.573\\). As the data refers to a percentage value, its support is bounded on the interval \\([0,100]\\), which may be normalized to the unit interval \\([0,1]\\) for computatibility purposes. As none of the observed values are at the boundaries \\(0\\) or \\(1\\) (and it is reasonable to assume that no observation will attain this value), the fat percentage may likewise be assumed to belong to the strictly closed \\((0,100)\\) interval. Generalized linear models may consequently be more appropriate to model this form of data, in particular for families with bounded support (e.g.: Beta regression)."
  },
  {
    "objectID": "vignettes/tecatorRegression.html#absorbance-curves",
    "href": "vignettes/tecatorRegression.html#absorbance-curves",
    "title": "Tecator Infratec Analyzer",
    "section": "Absorbance curves",
    "text": "Absorbance curves\nThe absorbance curve data, unlike the fat percentage data seen in the previous subsections, is composed of values obtainted discreetly by subjecting each of the meat samples to a spectrometric measuring device varying in the 850 - 1050nm wavelength range uniformly, with \\(100\\) equal design points across all meat samples. This results in \\(100 \\cdot 215 = 21500\\) observations in total. Figure 2 and Figure 3 provide a brief analysis on the distribution of the data; the plotted data is composed of the raw (i.e.: not smoothed) data. As previous reports have indicated the presence of an additional peak on the absorbance curves around the 930nm wavelength for meat samples with fat percentage superceding 20, the data are separated amongst these two groups.\n\n\nShow R code\ng03 = tecator_data |&gt;\n  ggplot(mapping = aes(y = absorbance,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = \"Absorbance\",\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng04 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(mean_absorbance = mean(absorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &gt; Fat\",\n                                   \"20% &lt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          mean_absorbance = mean(tecator_data$absorbance)) |&gt;\n  ggplot(mapping = aes(y = mean_absorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = \"Absorbance\",\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng03 + g04\n\n\n\n\n\n\n\n\nFigure 2: Left panel: spaghetti plot of the absorbance curves, separated by fat percentage. Right panel: mean absorbance curves, separated by fat percentage.\n\n\n\n\n\n\n\nShow R code\ng05 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(var_absorbance = var(absorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          var_absorbance = var(tecator_data$absorbance)) |&gt;\n  ggplot(mapping = aes(y = var_absorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(\"Absorbance\"^2),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng06 = melt(data = cor(tecator$absorp.fdata$data)) |&gt;\n  mutate(x = 850 + 200 * (Var1 - 1) / 99,\n         y = 850 + 200 * (Var2 - 1) / 99,\n         z = value,\n         Var1 = NULL,\n         Var2 = NULL,\n         value = NULL) |&gt;\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       fill = z)) +\n  geom_raster() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 size = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  size = .125),\n        legend.position = \"top\",\n        plot.margin = unit(c(.25, .75, .25, .75), \"cm\")) +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       fill = \"Correlation\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_fill_continuous(type = \"viridis\")\ng05 + g06\n\n\n\n\n\n\n\n\nFigure 3: Left panel: absorbance variance curves, separated by fat percentage. Right panel: correlogram of the absorbance curves.\n\n\n\n\n\nFrom a modelling standpoint, the values obtained at each design point may be considered covariates \\(x_{i,1},\\ldots,x_{i,100}\\), for \\(i \\in \\{1,\\ldots,215\\}\\), and as \\(100 = p &lt; N = 215\\), even a simple linear regression model is feasible. However, as evidenced in the Right panel of Figure 3, the data is highly correlated. Note that the minimum absolute correlation observed across the absorbance curves was \\(\\min_{i,j}\\{\\vert \\rho_{i,j} \\vert\\} \\approx 0.963\\). This implies that, were the data applied indiscriminately in a simpler linear regression model, it would be subject to a significant amount of multicollinearity. Alternatively, each absorbance curve may be considered a functional covariate \\(\\chi_{1},\\ldots,\\chi_{215}\\), which may be estimated by smoothing the discrete observed values, allowing for a more flexible form of high-dimensional modelling through functional regression. Adopting the purview of functional data analysis in this context also presents other advantages: functionals (i.e.: derivatives, integrals, etc.) of the data in question may likewise be explored. It is important to remark that the values of these functionals is dependent on the support of the data in question. The method ‘tf_derive()’, part of the ‘tf’ ‘R’ package, allows for the computation of the first-order derivative of the absorbance curves. Table 3 provides a view of the inclusion of the derivative column.\n\n\n\n\n\n\n\n\n\n\n\nfat\nabsorbance\ndabsorbance\n\n\n\n\n22.5\n1: (850,3);(852,3);(854,3); …\n1: (851,2e-04);(853,2e-04);(855,3e-04); …\n\n\n40.1\n2: (850,3);(852,3);(854,3); …\n2: (851,0.002);(853,0.002);(855,0.002); …\n\n\n8.4\n3: (850,3);(852,3);(854,3); …\n3: (851,9e-04);(853,8e-04);(855,9e-04); …\n\n\n5.9\n4: (850,3);(852,3);(854,3); …\n4: (851,9e-04);(853,8e-04);(855,9e-04); …\n\n\n25.5\n5: (850,3);(852,3);(854,3); …\n5: (851,9e-04);(853,9e-04);(855,9e-04); …\n\n\n\n\n\nTable 3: Comparisons of the ‘absorbance’ and ‘dabsorbance’ columns of the five first rows of the ‘tecator’ dataset. The column labelled as ‘dabsorbance’ is composed of ‘tfd’ objects, and represents the first order derivative of the ‘absorbance’ column, as computed via finite differences.\n\n\n\nAs similarly seen in previous reports, the derivative of the absorbance curves is significantly different for meat samples with fat percentage greater than 20%, as illustrated by Figure 4 and Figure 5. Unlike the usual absorbance curves, in this context the minimum absolute correlation observed across the derivatives of the absorbance curves is \\(\\min_{i,j}\\{\\vert \\tilde{\\rho}_{i,j} \\vert\\} \\approx 0\\). The \\(D\\) symbol is adopted to denote the application of the derivative. Note, in the Right panel of Figure 5, that the correlogram presents a steep decrease in correlation between the 930nm and 950nm wavelengths. This corresponds to a steep valley in the mean function for the data with fat percentage greater than 20, as seen in the Right panel of Figure 4.\n\n\nShow R code\ng07 = tecator_data |&gt;\n  ggplot(mapping = aes(y = dabsorbance,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(italic(\"D\"), \"Absorbance\")),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\"))\ng08 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(mean_dabsorbance = mean(dabsorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          mean_dabsorbance = mean(tecator_data$dabsorbance)) |&gt;\n  ggplot(mapping = aes(y = mean_dabsorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(italic(\"D\"), \"Absorbance\")),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\"))\ng07 + g08\n\n\n\n\n\n\n\n\nFigure 4: Left panel: spaghetti plot of the derivative of the absorbance curves, separated by fat percentage. Right panel: mean derivative of the absorbance curves, separated by fat percentage.\n\n\n\n\n\n\n\nShow R code\ng09 = tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(var_dabsorbance = var(dabsorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          var_dabsorbance = var(tecator_data$dabsorbance)) |&gt;\n  ggplot(mapping = aes(y = var_dabsorbance,\n                       color = factor(fat20,\n                                      levels = c(\"20% &gt; Fat\",\n                                                 \"20% &lt; Fat\",\n                                                 \"Overall\")))) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(\"(\", italic(\"D\"), \"Absorbance)\"^2)),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\", \"red\"))\ng10 = tecator_data$dabsorbance |&gt;\n  as.matrix() |&gt;\n  cor() |&gt;\n  melt() |&gt;\n  mutate(x = Var1,\n         y = Var2,\n         z = value,\n         Var1 = NULL,\n         Var2 = NULL,\n         value = NULL) |&gt;\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       fill = z)) +\n  geom_raster() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 size = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  size = .125),\n        legend.position = \"top\",\n        plot.margin = unit(c(.25, .75, .25, .75), \"cm\")) +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       fill = \"Correlation\") +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(850, 1050)) +\n  scale_fill_continuous(type = \"viridis\")\ng09 + g10\n\n\n\n\n\n\n\n\nFigure 5: Left panel: variance of the derivative of the absorbance curves, separated by fat percentage. Right panel: correlogram of the derivative of the absorbance curves.\n\n\n\n\n\nAn usual problem when dealing with multivariate data is that, in the absence of greater context, there is no singular approach to determining a ranking of observations. This is also true of functional data, hence there is no specific way to determine functional quantiles, nor a universal definition of a functional outlier. López-Pintado and Romo (2009) defines a form of functional depth, which allows for the computation of the functional median (as well as other quantiles), a work which was latter expanded in Sun and Genton (2011), wherein the procedure to construct a functional boxplot was delineated, allowing also for outlier detection. The computational implementation of functional boxplots is available in the ‘fda’ package for the R programming language, as part of the method fbplot(). Moreover, the computation of the functional depth developed in López-Pintado and Romo (2009) is available in the tf package through the tf_depth() method. Figure 6 displays functional boxplots of the absorbance curves, as well as their corresponding derivatives. Interesting insights may be gleaned with respect to manner in which functional depth detects outliers: in the first boxplot the observations \\(43\\), \\(44\\), \\(99\\), \\(140\\) and \\(185\\) are classified as outliers, whilst for the second boxplot, only the observation \\(140\\) is classified as an outlier. This is a sensible result, as it may be observed that the outlier observations in the former plot present significant vertical shift with respect to the median curves, and the first order derivative of a function is invariant with respect to any constant term (i.e., any constant vertical shift), hence the application of the derivative ‘standardizes’ the absorbance curves. Figure 7 enhances previous plots seen in Figure 2 and Figure 4 by highlighting outlier curves. As previously stated, the outlier curves for the absorbance curves possess significant vertical shift ‘upwards’, i.e., they are consistently greater than the mass of functional data, but also present a similar overall ‘shape’. By contrast, the sole outlier for the derivative of the absorbance curves presents more complex behaviour, initially being greater than the mass of functional data, and crossing over so that it is lesser. We note, from Figure 8, that the functional mean and median are very similar in the case of the derivative of the absorbance curves, whilst for the absorbance curves themselves there is indication of positive skewness, particularly for curves whose corresponding meat sample has more than 20% of fat.\n\n\nShow R code\npar(mfrow = c(2, 1))\ntecator_data$absorbance |&gt; as.matrix(byrow = FALSE) |&gt; t() |&gt;\n  fbplot(xlab = substitute(paste(\"Wavelength (in \",italic(\"nm\"),\")\")),\n         ylab = substitute(\"Absorbance\"),\n         family = \"LM Roman 10\",\n         axes = F,\n         ylim = c(1.5, 5.5),\n         color = \"darkgrey\",\n         barcol = \"lightgray\",\n         outliercol = \"red\",\n         x = tf_arg(tecator_data$absorbance),\n         xlim = c(850, 1050),\n         method = \"MBD\") |&gt; invisible()\naxis(side = 2, at = c(-100, 1, 2, 3, 4, 5, 6, 7, 100),\n     labels = c(\"a\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"b\"),\n     family = \"LM Roman 10\",\n     col.axis = \"cornsilk4\",\n     las = 2,\n     cex.axis = .75)\naxis(side = 1, at = c(-10, 850, 900, 950, 1000, 1050, 2000),\n     labels = c(\"a\", \"850\", \"900\", \"950\", \"1000\", \"1050\", \"b\"),\n     family = \"LM Roman 10\",\n     col.axis = \"cornsilk4\",\n     las = 1,\n     cex.axis = .75)\ntecator_data$dabsorbance |&gt; as.matrix(byrow = FALSE) |&gt; t() |&gt;\n  fbplot(xlab = substitute(paste(\"Wavelength (in \",italic(\"nm\"),\")\")),\n         ylab = substitute(paste(italic(\"D\"),\"Absorbance\")),\n         family = \"LM Roman 10\",\n         axes = F,\n         ylim = c(-0.02, 0.05),\n         color = \"darkgrey\",\n         barcol = \"lightgray\",\n         outliercol = \"red\",\n         x = tf_arg(tecator_data$dabsorbance),\n         xlim = c(850, 1050),\n         method = \"MBD\") |&gt; invisible()\naxis(side = 2, at = c(-100, -0.02, 0, 0.02, 0.04, 100),\n     labels = c(\"a\", \"-0.02\", \"0\", \"0.02\", \"0.04\", \"b\"),\n     family = \"LM Roman 10\",\n     col.axis = \"cornsilk4\",\n     las = 2,\n     cex.axis = .75)\naxis(side = 1, at = c(-10, 850, 900, 950, 1000, 1050, 2000),\n     labels = c(\"a\", \"850\", \"900\", \"950\", \"1000\", \"1050\", \"b\"),\n     family = \"LM Roman 10\",\n     col.axis = \"cornsilk4\",\n     las = 1,\n     cex.axis = .75)\n\n\n\n\n\n\n\n\nFigure 6: Upper panel: functional boxplots of the absorbance curves. Lower panel: functional boxplots of the derivative of the absorbance curves.\n\n\n\n\n\n\n\nShow R code\ng11 = g03\ng11$data = g11$data[ - c(43, 44, 140, 99, 185) , ]\ng11 = g11 + tecator_data[ c(43, 44, 99, 185) , ] |&gt; \n  geom_spaghetti(mapping = aes(y = absorbance),\n                 col = \"black\") + tecator_data[ 140 , ] |&gt; \n  geom_spaghetti(mapping = aes(y = absorbance),\n                 col = \"black\",\n                 linetype = \"dashed\")\ng12 = g07\ng12$data = g07$data[ -140 , ]\ng12 = g12 + tecator_data[ 140, ] |&gt; \n  geom_spaghetti(mapping = aes(y = dabsorbance),\n                 col = \"black\")\ng11 + g12\n\n\n\n\n\n\n\n\nFigure 7: Upper panel: spaghetti plot of the absorbance curves, separated by fat percentage, with outlier curves highlighted in black; observation \\(140\\) is likewise dashed. Lower panel: spaghetti plot of the derivative of the absorbance curves, separated by fat percentage, with outlier curves highlighted in black.\n\n\n\n\n\n\n\nShow R code\ng04 = g04 + tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(median_absorbance = median(absorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          median_absorbance = median(tecator_data$absorbance)) |&gt;\n  geom_spaghetti(inherit.aes = F,\n                 mapping = aes(y = median_absorbance,\n                               col = fat20),\n                 linetype = \"dashed\")\ng08 = g08 + tecator_data |&gt; \n  group_by(fat20) |&gt; summarise(median_dabsorbance = median(dabsorbance)) |&gt;\n  mutate(fat20 = factor(fat20,\n                        levels = c(\"20% &lt; Fat\",\n                                   \"20% &gt; Fat\",\n                                   \"Overall\"))) |&gt;\n  add_row(fat20 = \"Overall\",\n          median_dabsorbance = median(tecator_data$dabsorbance)) |&gt;\n  geom_spaghetti(inherit.aes = F,\n                 mapping = aes(y = median_dabsorbance,\n                               col = fat20),\n                 linetype = \"dashed\")\ng04 + g08\n\n\n\n\n\n\n\n\nFigure 8: Upper panel: mean and median absorbance curves, separated by fat percentage, represented respectively by solid and dashed curves. Lower panel: mean and median derivative of the absorbance curves, separated by fat percentage, represented respectively by solid and dashed curves.\n\n\n\n\n\nNote that Figure 2, Figure 3 and Figure 4 display the raw absorbance curves (and corresponding derivatives), that is, we employ no smoothing techniques in those displays. This is feasible for this particular data set due to the fact that the absorbance curves (and corresponding derivatives) are contaminated by very little noise. The method tfb(), of the ‘tidyfun’ allows us to represent variables originally stored as tfd objects, ideal for raw functional data, to variables stored as tfb functional data, which is ideal for representing functional data as a linear combination of a finite number of basis functions; this is done by an interface with methods on the ‘mgcv’ R package. In particular, we will smooth the usual absorbance curves utilizing \\(K = 15\\) B-spline basis, whilst the derivatives of the absorbance curves will be smoothed utilizing \\(K = 30\\) B-spline basis. The results are presented in Figures Figure 9 and Figure 10. Whilst certain distinctions are visible between the raw and smoothed data, it is apparent that the smoothed data provides a reasonable approximation to the sampled curves. Moreover, we note that the tfb() method itself provides a diagnostic with respect to the amount of variability preserved in the basis representation (which is ommited in the present study, but is exhibited by setting the argument verbose = TRUE): for both generated tfb objects the basis representations preserve a minimum of \\(99.8\\%\\) variability. We may now proceed to studying the functional regression problem.\n\n\nShow R code\ntecator_data = tecator_data |&gt; mutate(absorbance_basis = tfb(absorbance,\n                                                             basis = \"spline\",\n                                                             bs = \"bs\",\n                                                             k = 15,\n                                                             verbose = FALSE),\n                                      dabsorbance_basis = tfb(dabsorbance,\n                                                              basis = \"spline\",\n                                                              bs = \"bs\",\n                                                              k = 30,\n                                                              verbose = FALSE))\ng13 = tecator_data |&gt;\n  ggplot(mapping = aes(y = absorbance_basis,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(\"Smoothed Absorbance\"),\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\")) +\n  geom_vline(xintercept = 930,\n             linetype = \"dashed\",\n             col = \"black\",\n             alpha = .5)\ng03 + g13\n\n\n\n\n\n\n\n\nFigure 9: Left panel: raw absorbance curves. Right panel: smoothed absorbance curves.\n\n\n\n\n\n\n\nShow R code\ng14 = tecator_data |&gt;\n  ggplot(mapping = aes(y = dabsorbance_basis,\n                       color = fat20)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(\"Smoothed \",italic(\"D\"),\"Absorbance\")),,\n       col = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(850, 900, 930, 950, 1000, 1050),\n                     labels = c(\"850\", \"900\", \"930\", \"950\", \"1000\", \"1050\"),\n                     limits = c(845, 1055)) +\n  scale_color_manual(values = c(\"green\", \"orange\"))\ng07 + g14\n\n\n\n\n\n\n\n\nFigure 10: Left panel: raw derivative of the absorbance curves. Right panel: smoothed derivative of the absorbance curves.\n\n\n\n\n\nUltimately, as the observed functions are sufficiently regular, the functional regression models applied in the following section were constructed utilizing the raw absorbance curves as predictors, and this exploration was mostly illustrative."
  },
  {
    "objectID": "vignettes/tecatorRegression.html#generalized-functional-linear-model",
    "href": "vignettes/tecatorRegression.html#generalized-functional-linear-model",
    "title": "Tecator Infratec Analyzer",
    "section": "Generalized Functional Linear Model",
    "text": "Generalized Functional Linear Model\nFor the GFLM, we rewrite the linear term \\(\\beta_1(\\cdot)\\) in Equation 1 as a one-dimensional basis expansion of \\(K\\) cubic spline (wherein other basis expansions are also available), such that: \\[\n  \\beta_1(s) = \\sum^K_{j = 1} \\theta_j \\textbf{B}_{j}(t).\n\\] Hence, we rewrite the inverse of the link function applied to the mean \\(\\mu_i\\) as \\[\ng^{-1}(\\mu_i) = \\beta_0 + \\int^{1050}_{850} \\beta_1(s) D \\chi_i(s) \\; \\text{d}s = \\beta_0 + \\sum^K_{j = 1}\\theta_j Z_{j}(i),\n\\] where \\[\n  Z_j(i) = \\int^{1050}_{850} \\beta_1(s) D \\chi_i(s) \\; \\text{d}s.\n\\] Thus, we essentially reduce the infinite-dimensional problem of estimating \\(\\beta_1(\\cdot)\\) into a finite-dimensional problem of estimating the values of \\(\\beta_0\\) and \\(\\mathbf{\\theta}\\). In this context, there are a number of configurations to be determined, which include\n\nThe number of components \\(K\\) for \\(\\beta_1(t)\\);\nThe link function \\(g(\\cdot)\\) to be adopted;\nThe family adopted in the fitting procedure;\n\namongst other settings. For \\(K\\), we selected \\(K = 30\\), as for \\(K &gt; 30\\) the estimates \\(\\hat{\\beta}_1(t)\\) present little variation. The link function was chosen as probit, albeit similar to the tuning of \\(K\\), there were very small diferences when comapared to the other link functions. Lastly, as alluded to previously on the exploratory data analysis step, we choose to consider the response variable as Beta distributed. Figure 12 exhibits the resulting residual analysis which is obtained (utilizing the appraise() method from the gratia R package): note the presence of a pattern on the residuals versus linear predictor plot.\n\n\nShow R code\ntecator_data %&lt;&gt;% mutate(dabsorbance_matrix = dabsorbance |&gt; as.matrix(),\n                         fat = fat / 100)\ntemporary_data = tecator_data |&gt;\n  subset(train = 1)\nfit_ideal = temporary_data %&gt;% pfr(data = .,\n                                   formula = fat ~ lf(X = dabsorbance_matrix,\n                                                      argvals = attr(dabsorbance_matrix, \"arg\"),\n                                                      bs = \"cr\",\n                                                      k = 30),\n                                   method = \"REML\",\n                                   family = betar(link = \"probit\"),\n                                   fitter = \"gam\")\nappraise(fit_ideal) & theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"right\",\n        panel.background = element_blank())\n\n\n\n\n\n\n\n\nFigure 12: Residual analysis plot generated via the appraise() method for the training data set.\n\n\n\n\n\n\n\nShow R code\ncoef(fit_ideal) |&gt;\n  mutate(sup_value = value + qnorm(.95) * se,\n         inf_value = value + qnorm(.05) * se) %&gt;%\n  ggplot(data = .,\n         mapping = aes(x = dabsorbance_matrix.argvals,\n                       y = value)) +\n  geom_hline(yintercept = 0,\n             col = \"red\",\n             linetype = \"dashed\") +\n  geom_line() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"right\",\n        panel.background = element_blank()) +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(beta[1], \"(\", italic(\"t\"), \")\"))) +\n  geom_line(inherit.aes = F,\n            mapping = aes(x = dabsorbance_matrix.argvals,\n                          y = sup_value),\n            linetype = \"dotted\") +\n  geom_line(inherit.aes = F,\n            mapping = aes(x = dabsorbance_matrix.argvals,\n                          y = inf_value),\n            linetype = \"dotted\") +\n  scale_x_continuous(breaks = c(0, .25, .5, .75, 1),\n                     labels = c(\"850\", \"900\", \"950\", \"1000\", \"1050\"),\n                     limits = c(0, 1))\n\n\n\n\n\n\n\n\nFigure 13: Estimated \\(\\hat{\\beta}_1(t)\\)."
  },
  {
    "objectID": "vignettes/tecatorRegression.html#functional-generalized-additive-model",
    "href": "vignettes/tecatorRegression.html#functional-generalized-additive-model",
    "title": "Tecator Infratec Analyzer",
    "section": "Functional Generalized Additive Model",
    "text": "Functional Generalized Additive Model\nBefore applying it, we will present some aspects of the FGAM model, as seen in McLean et al. (2014). First, we rewrite the functional additive term in the form of a tensor product expansion of two marginal cubic spline functions (other basis expansions are also available), of orders \\(K_1\\) and \\(K_2\\), as follows: \\[\n  F\\{t, D \\chi_i(t)\\} = \\sum^{K_1}_{j_1 = 1}\\sum^{K_2}_{j_2 = 1}\\theta_{j_1,j_2} \\textbf{B}_{1,j_1}(t) \\textbf{B}_{2,j_2}(D \\chi_i (t)).\n\\] Hence, we rewrite the inverse of the link function applied to the mean \\(\\mu_i\\) as \\[\n  g^{-1}(\\mu_i) = \\beta_0 + \\!\\!\\int^{1050}_{850} F\\{s,D \\chi_i(s)\\} \\; \\text{d}s = \\beta_0 + \\sum^{K_1}_{j_1 = 1}\\sum^{K_2}_{j_2 = 1} \\theta_{j_1,j_2}Z_{j_1,j_2}(i),\n\\] where \\[\n  Z_{j_1,j_2}(i) = \\!\\!\\int^{1050}_{850}  \\textbf{B}_{1,j_1}(s) \\textbf{B}_{2,j_2}(D \\chi_i (s)) \\; \\text{d}s.\n\\] That is, similarly to the GFLM, we have reduced the infinite-dimensional problem of estimating \\(F\\{\\cdot,\\cdot\\}\\) into a finite-dimensional estimating problem where we seek to determine the parameters \\(\\beta_0\\) and \\(\\mathbf{\\theta}\\), for example, via restricted maximum likelihood methods. There are a panoply of settings to be tuned when estimating an FGAM, such as:\n\nThe number of components \\(K_1\\) and \\(K_2\\) on the functional additive term;\nThe link function \\(g(\\cdot)\\) to be adopted;\nThe family adopted in the fitting procedure;\n\namongst others. The third setting was alluded to previously when presenting the analysis of the Fat percentage data, wherein we observed that a distribution family of bounded support is ideal for the response variable, hence we will adopt the Beta regression framework. With respect to the link function, we determined, via residual analysis, that the probit link function results in the best fit (when comapared to the cloglog, cauchit and logit link functions). For the number of components on the functional additive term, we defined \\(K_1 = K_2 = K\\), and visually examined the predictive behavior of the models for \\(K \\in \\{1,2,\\ldots,10\\}\\). Figure 13 exhibits fitted versus true values, separated by training data and test data, for \\(K \\in \\{5,6,7\\}\\). We note that the model with \\(K = 6\\) presents less variability than the model with \\(K = 5\\), however the distinction between the model with \\(K = 6\\) and \\(K = 7\\) is less apparent. Likewise, we find that the change in estimate variability is similar through \\(K &gt; 6\\). Therefore, we likewise determined the ideal number of components via residuals analysis as \\(K = 6\\).\n\n\n\n\n\n\nOn estimating the deviation parameter\n\n\n\nDue to an error, the fgam() function does not estimate the deviation parameter \\(\\phi\\). Therefore, we have coupled the fgam() method from the refund R package and the gamlss() method from the gamlss R package in order to estimate it. We first estimate the FGAM model, with the fgam() method, utilizing a fixed deviation parameter \\(\\phi_0\\) (which we have chosen as \\(\\phi_0 = 1\\)). We subsequently estimate another Beta regression model using the gamlss() method, with fixed mean values \\(\\hat{\\mathbf{\\mu}}\\) obtained from the fitted FGAM model, according to Equation 2, and obtain the value of the scale parameter estimate \\(\\hat{\\sigma}^2\\). Note that the parametrization of the variance in the Beta regression model differs between the mgcv implementation (and consequently the fgam() method) and the gamlss implementation. mgcv parametrizes the variance of \\(Y_i\\) as \\[\n  \\mathbb{V}\\text{ar}[Y_i \\vert \\mu_i] = \\frac{\\mu_i(1 - \\mu_i)}{1 + \\phi},\n\\] conversely, gamlss parametrizes the variance of \\(Y_i\\) as \\[\n  \\mathbb{V}\\text{ar}[Y_i \\vert \\mu_i] = \\sigma^2 \\mu_i(1 - \\mu_i).\n\\] Consequently, we estimate the deviance parameter, based in the scale parameter estimate obtained by gamlss, as \\[\n  \\hat{\\phi} = \\frac{1 - \\hat{\\sigma}^2}{\\hat{\\sigma}^2}.\n\\tag{3}\\] We thereafter reestimate the FGAM model using a fixed deviance estimate obtained via Equation 3, repeating the procedure until a maximum number of iterations is reached (which we have set to 25). An additional benefit of this coupling is that it allows us to utilize the residual analysis tools available from the gamlss package to better diagnose our model’s fit.\n\n\n\n\nShow R code\ntheta_initial = 1\nmax_iterations = 25\ntheta_underfit = numeric(max_iterations)\ntheta_overfit = numeric(max_iterations)\ntheta_ideal = numeric(max_iterations)\ntheta_underfit[1] = theta_initial\ntheta_overfit[1] = theta_initial\ntheta_ideal[1] = theta_initial\n\niteration = 1\nwhile(iteration &lt; max_iterations)\n{\n  fit_underfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                                         basistype = \"te\",\n                                         bs = \"cr\",\n                                         k = c(5, 5)),\n                      fitter = \"gam\",\n                      family = betar(link = \"probit\",\n                                     theta = theta_underfit[ iteration ]),\n                      tensortype = \"te\",\n                      data = tecator_data,\n                      weights = tecator_data$train,\n                      method = \"REML\")\n  fit_overfit = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                                        basistype = \"te\",\n                                        bs = \"cr\",\n                                        k = c(7, 7)),\n                     fitter = \"gam\",\n                     family = betar(link = \"probit\",\n                                    theta = theta_overfit[ iteration ]),\n                     tensortype = \"te\",\n                     data = tecator_data,\n                     weights = tecator_data$train,\n                     method = \"REML\")\n  fit_ideal = fgam(formula = fat ~ af(X = dabsorbance_matrix,\n                                      basistype = \"te\",\n                                      bs = \"cr\",\n                                      k = c(6, 6)),\n                   fitter = \"gam\",\n                   family = betar(link = \"probit\",\n                                  theta = theta_ideal[ iteration ]),\n                   tensortype = \"te\",\n                   data = tecator_data,\n                   weights = tecator_data$train,\n                   method = \"REML\")\n  tecator_data = tecator_data |&gt;\n  mutate(fat_under = fit_underfit$fitted.values,\n         fat_over = fit_overfit$fitted.values,\n         fat_ideal = fit_ideal$fitted.values)\n  temporary_data = tecator_data |&gt; subset(train == 1)\n  diag_underfit =\n    gamlss(formula = fat ~-1,\n           family = BE(mu.link = \"identity\",\n                       sigma.link = \"identity\"),\n           mu.start = temporary_data$fat_under,\n           mu.fix = T,\n           data = temporary_data,\n           trace = F)\n  diag_overfit =\n    gamlss(formula = fat ~-1,\n           family = BE(mu.link = \"identity\",\n                       sigma.link = \"identity\"),\n           mu.start = temporary_data$fat_over,\n           mu.fix = T,\n           data = temporary_data,\n           trace = F)\n  diag_ideal =\n    gamlss(formula = fat ~-1,\n           family = BE(mu.link = \"identity\",\n                       sigma.link = \"identity\"),\n           mu.start = temporary_data$fat_ideal,\n           mu.fix = T,\n           data = temporary_data,\n           trace = F)\n  theta_underfit[ iteration + 1 ] = (1 - diag_underfit$sigma.coefficients ^ 2) / (diag_underfit$sigma.coefficients ^ 2)\n  theta_overfit[ iteration + 1 ] = (1 - diag_overfit$sigma.coefficients ^ 2) / (diag_overfit$sigma.coefficients ^ 2)\n  theta_ideal[ iteration + 1 ] = (1 - diag_ideal$sigma.coefficients ^ 2) / (diag_ideal$sigma.coefficients ^ 2)\n  iteration = iteration + 1\n}\n\ng17 = tecator_data |&gt; select(fat_under, fat_over, fat_ideal, fat, train) |&gt;\n  melt(id.vars = c(\"fat\",\n                   \"train\")) |&gt;\n  mutate(fitted = value,\n         model = sapply(X = as.character(variable),\n                        switch,\n                        \"fat_under\" = \"K = 5\",\n                        \"fat_over\" = \"K = 7\",\n                        \"fat_ideal\" = \"K = 6\") |&gt;\n           factor(levels = c(\"K = 5\",\n                             \"K = 6\",\n                             \"K = 7\")),\n         train = factor(x = ifelse(test = train == 1, \"Train\", \"Test\"),\n                        levels = c(\"Train\", \"Test\"))) |&gt;\n  mutate(value = NULL,\n         variable = NULL) |&gt;\n  ggplot(mapping = aes(x = fitted,\n                       y = fat,\n                       color = train)) +\n  geom_point() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = \"Fitted\",\n       y = \"True\",\n       col = \"\") +\n  scale_color_manual(values = c(\"blue\", \"red\")) +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"0\", \"1/2\", \"1\"),\n                     limits = c(0, 1)) +\n  scale_y_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"0\", \"1/2\", \"1\"),\n                     limits = c(0, 1)) +\n  geom_abline(slope = 1,\n              intercept = 0,\n              linetype = \"dashed\") +\n  facet_wrap(vars(model))\ng17\n\n\n\n\n\n\n\n\nFigure 14: Fitted values versus true values of Fat percentage, separated between training and test data sets, for \\(K \\in \\{5,6,7\\}\\).\n\n\n\n\n\nFigure 15 depicts some residual analysis plots output by the appraise() method from the gratia package in R. The QQ plot presents deviations at the extremes, and the linear predictor versus deviance residuals plot exhibits evidence of non-homoscedastic behavior, with a higher variation in residuals with lower corresponding linear predictors values. Nevertheless, we conclude the model exhibits a sufficiently good fit, when estimated solely on the training data.\n\n\n\n\n\n\n\n\nFigure 15: Residual analysis plot generated via the appraise() method for the training data set.\n\n\n\n\n\nFigure 16 depicts the residual analysis plots output by the appraise() method for the model constructed utilizing the full data set, with \\(K = 6\\). The residuals present similar behavior to that which was noted in Figure 16, and as such we conclude again that the fit is sufficiently good.\n\n\n\n\n\n\n\n\nFigure 16: Residual analysis plot generated via the appraise() method for the complete data set.\n\n\n\n\n\n\n\nShow R code\nse = smooth_estimates(fit_total, dist = .05)\nse |&gt; draw() + \n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"right\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = substitute(paste(italic(\"D\"),\"Absorbance\")),,\n       col = \"\",\n       subtitle = \"\",\n       tag = \"\",\n       caption = \"\") +\n  scale_x_continuous(expand = c(0, 0),\n                     breaks = c(0, .5, 1),\n                     labels = c(\"850\", \"950\", \"1050\"),\n                     limits = c(0.01169591, 1.004762)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  ggtitle(substitute(paste(\"te(\",italic(\"D\"),\"Absorbance,\", italic(t), \")\"))) +\n  scale_fill_continuous(type = \"viridis\",\n                        guide = \"colourbar\") +\n  guides(fill = guide_colourbar(title = substitute(paste(\"Partial effect\"))))\n#&gt; Scale for fill is already present.\n#&gt; Adding another scale for fill, which will replace the existing scale."
  },
  {
    "objectID": "vignettes/tecatorRegression.html#footnotes",
    "href": "vignettes/tecatorRegression.html#footnotes",
    "title": "Tecator Infratec Analyzer",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIt is apparent from the acronyms GFLM and FGAM that the position of the terms ‘Functional’ and ‘Generalized’ are interchangeable when denoting these models. Indeed, some references (see for example Eckardt, Mateu, and Greven (2024)) exchange the order of these terms in the latter acronym.↩︎"
  },
  {
    "objectID": "vignettes/ardRepresentation.html",
    "href": "vignettes/ardRepresentation.html",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "",
    "text": "Last updated 2025/07/01."
  },
  {
    "objectID": "vignettes/ardRepresentation.html#data",
    "href": "vignettes/ardRepresentation.html#data",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "Data",
    "text": "Data\nFor this particular study, we consider two distinct data sets, the Motorcycle data set and the Canadian weather data set: the former is frequently studied in the overall spline smoothing context, whilst the latter is appropriate for the more specific context of Functional Data Analysis. We will also present a brief simulation study.\n\n\nShow R code\nlibrary(\"tidyverse\")  ## R package for tidy data manipulation and visualization\nlibrary(\"tf\")         ## R package for tidy functional data manipulation\nlibrary(\"tidyfun\")    ## R package for tidy functional data visualization\nlibrary(\"extrafont\")\nlibrary(\"fda\")\nlibrary(\"MASS\")\nlibrary(\"tf\")         ## R package for tidy functional data manipulation\n\n\n\nThe Motorcycle data set\nThe Motorcycle data set (seen in Silverman (1985), and available in the R programming language in the package MASS), is composed of data recorded on a Tecator Infratec Food and Feed Analyzer tool, working in the wavelength range 850 - 1050nm by the Near Infrared Transmission (NIT) principle. Each sample (\\(N = 240\\)) contains finely chopped pure meat with different moisture, fat and protein contents. For each meat sample the data consists of a 100 channel spectrum of absorbances and the contents of moisture (water), fat and protein. The absorbance is \\(-\\log_{10}\\) of the transmittance measured by the spectrometer. The three contents, measured in percent, are determined by analytic chemistry (click here for further details).\n\n\nShow R code\nmotorcycle_data = data.frame(id = 1)\nmotorcycle_data$curve = tfd(data = mcycle$accel,\n                            arg = jitter(mcycle$times, amount = 0.1))\nmotorcycle_data$smooth_curve = motorcycle_data$curve |&gt; \n  tfb(basis = \"spline\",\n      verbose = FALSE,\n      k = 15,\n      bs = \"cr\")\ng03 = motorcycle_data |&gt;\n  ggplot(mapping = aes(y = smooth_curve)) +\n  geom_spaghetti() +\n  theme_classic() +\n  theme(text = element_text(size = unit(11, \"pt\"),\n                            family = \"LM Roman 10\",\n                            color = \"black\"),\n        axis.line = element_line(arrow = grid::arrow(length = unit(0.08, \"cm\"), \n                                                     ends = \"last\",\n                                                     angle = 30,\n                                                     type = \"closed\"),\n                                 linewidth = .25),\n        axis.ticks = element_line(color = \"black\",\n                                  linewidth = .125),\n        legend.position = \"top\") +\n  labs(x = expression(paste(\"Wavelength \", \"(in \", italic(\"nm\"), \")\")),\n       y = \"Absorbance\",\n       col = \"\")\ng03\n\n\n\n\n\n\n\n\n\n\n\nThe Canadian weather data set\nThe Canadian weather data set\n\n\nSimulated data\n\\[\n  y_i(t_{i,j}) = \\cos(t_{i,j}) + \\sin(2 t_{i,j}) + \\varepsilon_{i}(t_{i,j})\n\\] and \\[\n  y_i(t_{i,j}) = \\begin{pmatrix}\n    -2 \\\\\n    0 \\\\\n    3/2 \\\\\n    3/2 \\\\\n    0 \\\\\n    -1 \\\\\n    -1/2 \\\\\n    -1 \\\\\n    0 \\\\\n    0\n  \\end{pmatrix}\\textbf{B}(t_{i,j}) + \\varepsilon_i(t_{i,j})\n\\]"
  },
  {
    "objectID": "vignettes/ardRepresentation.html#setup",
    "href": "vignettes/ardRepresentation.html#setup",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "Setup",
    "text": "Setup\nThis vignette is primarily concerned with presenting an approach to sparse Functional Data representation utilizing the Automatic Relevance Determination (ARD) framework, itself only a topic in the wider Sparse Bayesian Learning (SBL) context. More precisely, our aim herein is to replicate some of the studies in Sousa, Souza, and Dias (2024) and Cruz, Souza, and Sousa (2024) (the former moreso than the latter, as we do not account for any correlation structure in the curves). The goal of these previous studies was to provide a novel Bayesian adaptive procedure to select the bases for functional data representation, the latter also extending the results of the former by including a correlation structure for the functional data, and delineating an estimation procedure utilizing the Variational Bayes (VB) approach.\n\\[\n  \\beta \\sim \\text{Normal}(0_K,\\textbf{A}).\n\\] where \\(\\textbf{A} = \\text{diag}(\\alpha_i)\\). For further detailing and intuition on the inner workings of the ARD approach, we refer the reader to Tipping (2001)\n\\[\n  \\begin{aligned}\n    \\Sigma & = (\\textbf{A} + \\beta \\Phi^\\top \\Phi)^{-1} \\\\\n    & = \\textbf{A}^{-1} - \\textbf{A}^{-1}\\Phi^\\top(\\mathbb{I}_N + \\beta \\Phi \\textbf{A}^{-1} \\Phi^\\top )^{-1}\\Phi \\textbf{A}^{-1}\n  \\end{aligned}\n\\]"
  },
  {
    "objectID": "vignettes/ardRepresentation.html#fixed-point-updates",
    "href": "vignettes/ardRepresentation.html#fixed-point-updates",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "Fixed Point Updates",
    "text": "Fixed Point Updates\nA"
  },
  {
    "objectID": "vignettes/ardRepresentation.html#expectation-maximization-approach",
    "href": "vignettes/ardRepresentation.html#expectation-maximization-approach",
    "title": "Automatic Relevance Determination for Functional Data Representation",
    "section": "Expectation Maximization Approach",
    "text": "Expectation Maximization Approach\nB"
  }
]